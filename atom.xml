<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ASK&#39;s Blog</title>
  
  
  <link href="https://ansike.github.io/blog/atom.xml" rel="self"/>
  
  <link href="https://ansike.github.io/blog/"/>
  <updated>2024-08-08T11:42:01.052Z</updated>
  <id>https://ansike.github.io/blog/</id>
  
  <author>
    <name>ask</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>摄影构图技巧</title>
    <link href="https://ansike.github.io/blog/life/%E7%94%9F%E6%B4%BB/%E6%91%84%E5%BD%B1/%E6%91%84%E5%BD%B1%E6%9E%84%E5%9B%BE%E6%8A%80%E5%B7%A7/"/>
    <id>https://ansike.github.io/blog/life/%E7%94%9F%E6%B4%BB/%E6%91%84%E5%BD%B1/%E6%91%84%E5%BD%B1%E6%9E%84%E5%9B%BE%E6%8A%80%E5%B7%A7/</id>
    <published>2024-05-28T02:11:21.000Z</published>
    <updated>2024-08-08T11:42:01.052Z</updated>
    
    <content type="html"><![CDATA[<p>【6分钟让你学会构图，拍照萌新变摄影大师！（手机摄影和相机摄影构图技巧）】<a href="https://www.bilibili.com/video/BV1Q64y1T7ox?vd_source=aa4c1676bace1ca69a356ceafb03c0b5" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1Q64y1T7ox?vd_source=aa4c1676bace1ca69a356ceafb03c0b5</a></p><h2 id="一、点构图"><a href="#一、点构图" class="headerlink" title="一、点构图"></a>一、点构图</h2><h3 id="1-中心点构图"><a href="#1-中心点构图" class="headerlink" title="1.中心点构图"></a>1.中心点构图</h3><img src="/blog/life/%E7%94%9F%E6%B4%BB/%E6%91%84%E5%BD%B1/%E6%91%84%E5%BD%B1%E6%9E%84%E5%9B%BE%E6%8A%80%E5%B7%A7/2b2581602946e254376740dbb303e3aa7f4e811a.jpg" class="" title="中心点 jpeg"><p>把画面放在照片中心，基础构图方式之一，使得照片常规而稳重不会犯错。但是容易使照片显得比较呆板缺乏活力。</p><img src="/blog/life/%E7%94%9F%E6%B4%BB/%E6%91%84%E5%BD%B1/%E6%91%84%E5%BD%B1%E6%9E%84%E5%9B%BE%E6%8A%80%E5%B7%A7/7da906ad2eb5e79ce21224131c707e4f094841a1.jpg" class="" title="中心点 jpeg"><h3 id="2-三分点构图"><a href="#2-三分点构图" class="headerlink" title="2.三分点构图"></a>2.三分点构图</h3><img src="/blog/life/%E7%94%9F%E6%B4%BB/%E6%91%84%E5%BD%B1/%E6%91%84%E5%BD%B1%E6%9E%84%E5%9B%BE%E6%8A%80%E5%B7%A7/330451280a015028a91357cd8be21cf3a8c2e998.jpg" class="" title="三分点 jpeg"><p>把照片长和宽三等分会出现水平线和垂直线相交的4个点。<br>三分点构图即把画面主体放在这4个点上，画面会比较和谐。</p><img src="/blog/life/%E7%94%9F%E6%B4%BB/%E6%91%84%E5%BD%B1/%E6%91%84%E5%BD%B1%E6%9E%84%E5%9B%BE%E6%8A%80%E5%B7%A7/e09a4ed6490a7b071a0308f551cc5cba5d07d6c0.jpg" class="" title="三分点 jpeg"><p>注意：三分点构图容易导致画面不平衡，这时需要在相对的三分点放入另外一个元素来平衡画面。</p><h2 id="二、线构图"><a href="#二、线构图" class="headerlink" title="二、线构图"></a>二、线构图</h2><h3 id="1-对称线构图"><a href="#1-对称线构图" class="headerlink" title="1.对称线构图"></a>1.对称线构图</h3><p>是中心点构图的延伸，沿着画面的水平居中线或者垂直居中线构图。<br>比如水平对称常常在有镜面反射的地方，比如水面<br>垂直对称常常用在对称的建筑</p><img src="/blog/life/%E7%94%9F%E6%B4%BB/%E6%91%84%E5%BD%B1/%E6%91%84%E5%BD%B1%E6%9E%84%E5%9B%BE%E6%8A%80%E5%B7%A7/WechatIMG42.jpg" class="" title="对称 jpeg"><h3 id="2-三分线构图"><a href="#2-三分线构图" class="headerlink" title="2.三分线构图"></a>2.三分线构图</h3><p>是三分点构图的延伸。<br>如果想强调地面，可把水平线放在上三分线</p><img src="/blog/life/%E7%94%9F%E6%B4%BB/%E6%91%84%E5%BD%B1/%E6%91%84%E5%BD%B1%E6%9E%84%E5%9B%BE%E6%8A%80%E5%B7%A7/b0c1059637f08885b56e8fe7ac7abfca798ea513.jpg" class="" title="三分线构图 jpeg"><p>如果想强调天空，可把水平线放在下三分线</p><img src="/blog/life/%E7%94%9F%E6%B4%BB/%E6%91%84%E5%BD%B1/%E6%91%84%E5%BD%B1%E6%9E%84%E5%9B%BE%E6%8A%80%E5%B7%A7/9f744a331446b65ebe093710aa4fcd1792309f6f.jpg" class="" title="三分线构图 jpeg"><p>人像构图注意：</p><p>垂直三分线构图拍摄人像要留意人物朝向<br>如果没有特别的想法<br>建议人物朝右放在左三分线</p><img src="/blog/life/%E7%94%9F%E6%B4%BB/%E6%91%84%E5%BD%B1/%E6%91%84%E5%BD%B1%E6%9E%84%E5%9B%BE%E6%8A%80%E5%B7%A7/be47372ed0b90cbbb149039566ca7a6002de65a9.jpg" class="" title="三分线构图 jpeg"><p>人物朝左就放在右三分线</p><img src="/blog/life/%E7%94%9F%E6%B4%BB/%E6%91%84%E5%BD%B1/%E6%91%84%E5%BD%B1%E6%9E%84%E5%9B%BE%E6%8A%80%E5%B7%A7/bab76b9a4c6a976077f5f4b7e451c2519ebbfac6.jpg" class="" title="三分线构图 jpeg"><h3 id="3-对角线构图"><a href="#3-对角线构图" class="headerlink" title="3.对角线构图"></a>3.对角线构图</h3><p>利用照片对角线进行构图<br>一般横平竖直能让人感觉稳定安心，倾斜会让人感觉动感和不稳定。因此对角线构图常常在运动和要表现一定情绪的人物照片中以及表达一些想法的创意照中。</p><p>注意事项：<br>打开辅助线<br>画面主题建议聚焦在三分点<br>这样的照片会更加舒服</p><img src="/blog/life/%E7%94%9F%E6%B4%BB/%E6%91%84%E5%BD%B1/%E6%91%84%E5%BD%B1%E6%9E%84%E5%9B%BE%E6%8A%80%E5%B7%A7/4190610e4ce25b1fe3bef10f8b697ae8f55d1f13.jpg" class="" title="对角线构图 jpeg"><img src="/blog/life/%E7%94%9F%E6%B4%BB/%E6%91%84%E5%BD%B1/%E6%91%84%E5%BD%B1%E6%9E%84%E5%9B%BE%E6%8A%80%E5%B7%A7/a8ebb99cac1203b973fc76cabd48ed55088ec1bb.jpg" class="" title="对角线构图 jpeg"><h3 id="4-曲线构图"><a href="#4-曲线构图" class="headerlink" title="4.曲线构图"></a>4.曲线构图</h3><p>利用自然存在的曲线，或者人为寻找的曲线进行构图</p><img src="/blog/life/%E7%94%9F%E6%B4%BB/%E6%91%84%E5%BD%B1/%E6%91%84%E5%BD%B1%E6%9E%84%E5%9B%BE%E6%8A%80%E5%B7%A7/79b1b675dda8ae129c3d3cf95c6ae8a8449c3af2.jpg" class="" title="曲线构图 jpeg"><p>最一般的是S型曲线，曲线构图比较多应用在画面中存在道路河流等元素的照片中。</p><img src="/blog/life/%E7%94%9F%E6%B4%BB/%E6%91%84%E5%BD%B1/%E6%91%84%E5%BD%B1%E6%9E%84%E5%9B%BE%E6%8A%80%E5%B7%A7/246c4f157d12177a040140ffd15ac1b79902e970.jpg" class="" title="曲线构图 jpeg"><h3 id="5-引导线构图"><a href="#5-引导线构图" class="headerlink" title="5.引导线构图"></a>5.引导线构图</h3><p>利用画面中的线条，把观众的目光引导到画面主体上</p><img src="/blog/life/%E7%94%9F%E6%B4%BB/%E6%91%84%E5%BD%B1/%E6%91%84%E5%BD%B1%E6%9E%84%E5%9B%BE%E6%8A%80%E5%B7%A7/e3cba30de4b791ebd1f3b2ddb0fbbab73210ff58.jpg" class="" title="引导线 jpeg"><p>这样构图的好处是很容易突出主体</p><h2 id="三、面构图"><a href="#三、面构图" class="headerlink" title="三、面构图"></a>三、面构图</h2><h3 id="1-前景构图"><a href="#1-前景构图" class="headerlink" title="1. 前景构图"></a>1. 前景构图</h3><p>在画面中，前面的景别叫做前景，在画面中加入前景，让画面更有趣的同时也可以给照片营造空间立体感</p><img src="/blog/life/%E7%94%9F%E6%B4%BB/%E6%91%84%E5%BD%B1/%E6%91%84%E5%BD%B1%E6%9E%84%E5%9B%BE%E6%8A%80%E5%B7%A7/0ab6cdaa725061961293623fdd83be20aa968376.jpg" class="" title="前景构图 jpeg"><h3 id="2-框架构图"><a href="#2-框架构图" class="headerlink" title="2. 框架构图"></a>2. 框架构图</h3><p>是前景构图的特殊形式</p><p>把例如门，窗等框架作为一种前景，框架构图除了具有前景构图的好处外还能更加突出画面主题</p><img src="/blog/life/%E7%94%9F%E6%B4%BB/%E6%91%84%E5%BD%B1/%E6%91%84%E5%BD%B1%E6%9E%84%E5%9B%BE%E6%8A%80%E5%B7%A7/d82ec7a7e966ee5b6edf72a081ebd9c0e52b8571.jpg" class="" title="框架构图 jpeg"><h3 id="3-填充构图"><a href="#3-填充构图" class="headerlink" title="3. 填充构图"></a>3. 填充构图</h3><p>让画面主体尽量充满整个画面<br>特别是用手机常用镜头或者广角镜头拍摄时</p><img src="/blog/life/%E7%94%9F%E6%B4%BB/%E6%91%84%E5%BD%B1/%E6%91%84%E5%BD%B1%E6%9E%84%E5%9B%BE%E6%8A%80%E5%B7%A7/1949209b8df63acce59c47b156c708a229fc1723.jpg" class="" title="填充构图 jpeg"><h3 id="4-留白构图"><a href="#4-留白构图" class="headerlink" title="4. 留白构图"></a>4. 留白构图</h3><p>除了画面主体以外，在画面中尽可能留白，极致地做画面减法<br>留白构图在一些小清新照片中用的比较多</p><img src="/blog/life/%E7%94%9F%E6%B4%BB/%E6%91%84%E5%BD%B1/%E6%91%84%E5%BD%B1%E6%9E%84%E5%9B%BE%E6%8A%80%E5%B7%A7/27f8924e960a4a36b8789d218cf90f307d5bd818.jpg" class="" title="填充构图 jpeg"><h3 id="5-重复构图"><a href="#5-重复构图" class="headerlink" title="5. 重复构图"></a>5. 重复构图</h3><p>当画面中有比较多重复元素的时候，可以尝试用重复构图把画面中的元素进行重复排列</p><img src="/blog/life/%E7%94%9F%E6%B4%BB/%E6%91%84%E5%BD%B1/%E6%91%84%E5%BD%B1%E6%9E%84%E5%9B%BE%E6%8A%80%E5%B7%A7/25be6218da10266e0999222abbc20fea7827a730.jpg" class="" title="重复构图 jpeg"><p>注意：<br>元素排列最好基于某种排列逻辑<br>否则画面会很乱</p><h3 id="6-对比构图"><a href="#6-对比构图" class="headerlink" title="6. 对比构图"></a>6. 对比构图</h3><p>和重复构图相对的</p><p>在重复的元素中运用某一种方式突出其中的某一个元素</p><img src="/blog/life/%E7%94%9F%E6%B4%BB/%E6%91%84%E5%BD%B1/%E6%91%84%E5%BD%B1%E6%9E%84%E5%9B%BE%E6%8A%80%E5%B7%A7/8545a420d5c80fd9bed14a96a66a7697cf04e486.jpg" class="" title="对比构图 jpeg"><p>这种方式可以是不同颜色对比</p><img src="/blog/life/%E7%94%9F%E6%B4%BB/%E6%91%84%E5%BD%B1/%E6%91%84%E5%BD%B1%E6%9E%84%E5%9B%BE%E6%8A%80%E5%B7%A7/472a650db293445bbd9f08b4c6bd6924daf53a77.jpg" class="" title="对比构图 jpeg"><p>可以是运动和静止对比</p><img src="/blog/life/%E7%94%9F%E6%B4%BB/%E6%91%84%E5%BD%B1/%E6%91%84%E5%BD%B1%E6%9E%84%E5%9B%BE%E6%8A%80%E5%B7%A7/3e1e849765f578404832d852bdb05bd56a321e78.jpg" class="" title="对比构图 jpeg"><p>可以是不同光影条件下的对比等等</p><img src="/blog/life/%E7%94%9F%E6%B4%BB/%E6%91%84%E5%BD%B1/%E6%91%84%E5%BD%B1%E6%9E%84%E5%9B%BE%E6%8A%80%E5%B7%A7/485cb4da6c34f4210f6c69c5cf2ce3a02400f513.jpg" class="" title="对比构图 jpeg">]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;【6分钟让你学会构图，拍照萌新变摄影大师！（手机摄影和相机摄影构图技巧）】&lt;a href=&quot;https://www.bilibili.com/video/BV1Q64y1T7ox?vd_source=aa4c1676bace1ca69a356ceafb03c0b5&quot; tar</summary>
      
    
    
    
    <category term="生活" scheme="https://ansike.github.io/blog/categories/life/"/>
    
    
    <category term="摄影" scheme="https://ansike.github.io/blog/tags/%E6%91%84%E5%BD%B1/"/>
    
  </entry>
  
  <entry>
    <title>大屏项目</title>
    <link href="https://ansike.github.io/blog/%E5%89%8D%E7%AB%AF/%E7%BC%96%E7%A8%8B/%E5%A4%A7%E5%B1%8F/bigscreen/"/>
    <id>https://ansike.github.io/blog/%E5%89%8D%E7%AB%AF/%E7%BC%96%E7%A8%8B/%E5%A4%A7%E5%B1%8F/bigscreen/</id>
    <published>2023-12-24T15:44:32.000Z</published>
    <updated>2024-08-08T11:42:01.118Z</updated>
    
    <content type="html"><![CDATA[<p>梳理自己前几年做过的大屏项目，以下的涉及到的组件80%都是自己编写，随后会将其中的核心代码脱敏记录下来。</p><ul><li>饼图组件</li><li>百分比仪表盘组件</li><li>告警滚动播放组件</li><li>区域分布中的region连线组件</li><li>利用率百分比组件</li></ul><img src="/blog/%E5%89%8D%E7%AB%AF/%E7%BC%96%E7%A8%8B/%E5%A4%A7%E5%B1%8F/bigscreen/bigscreen.jpeg" class="" title="bigscreen jpeg"><p>GIF 图</p><img src="/blog/%E5%89%8D%E7%AB%AF/%E7%BC%96%E7%A8%8B/%E5%A4%A7%E5%B1%8F/bigscreen/bigscreen.gif" class="" title="bigscreen gif">]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;梳理自己前几年做过的大屏项目，以下的涉及到的组件80%都是自己编写，随后会将其中的核心代码脱敏记录下来。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;饼图组件&lt;/li&gt;
&lt;li&gt;百分比仪表盘组件&lt;/li&gt;
&lt;li&gt;告警滚动播放组件&lt;/li&gt;
&lt;li&gt;区域分布中的region连线组件&lt;/li&gt;</summary>
      
    
    
    
    <category term="前端" scheme="https://ansike.github.io/blog/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="大屏" scheme="https://ansike.github.io/blog/tags/%E5%A4%A7%E5%B1%8F/"/>
    
    <category term="图表" scheme="https://ansike.github.io/blog/tags/%E5%9B%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>array</title>
    <link href="https://ansike.github.io/blog/programming/%E7%BC%96%E7%A8%8B/js/%E9%87%8D%E5%AD%A6js/array/"/>
    <id>https://ansike.github.io/blog/programming/%E7%BC%96%E7%A8%8B/js/%E9%87%8D%E5%AD%A6js/array/</id>
    <published>2023-09-17T01:42:33.000Z</published>
    <updated>2024-08-08T11:42:01.069Z</updated>
    
    <content type="html"><![CDATA[<h3 id="sort-函数"><a href="#sort-函数" class="headerlink" title="sort 函数"></a>sort 函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 猜一下计算结果？？？</span></span><br><span class="line">[<span class="number">-72</span>,<span class="number">-8</span>].sort()</span><br><span class="line">[<span class="number">-92</span>,<span class="number">-8</span>].sort()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. [-72,-8]</span></span><br><span class="line"><span class="comment">// 2. [-8,-92]</span></span><br></pre></td></tr></table></figure><p>原因：默认的排序规则是转换成字符串<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort" target="_blank" rel="noopener">comparing their sequences of UTF-16 code units values.</a> 按位比较字符串的码点</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;sort-函数&quot;&gt;&lt;a href=&quot;#sort-函数&quot; class=&quot;headerlink&quot; title=&quot;sort 函数&quot;&gt;&lt;/a&gt;sort 函数&lt;/h3&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gu</summary>
      
    
    
    
    <category term="编程" scheme="https://ansike.github.io/blog/categories/programming/"/>
    
    
    <category term="js" scheme="https://ansike.github.io/blog/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>UI适配</title>
    <link href="https://ansike.github.io/blog/programming/%E7%BC%96%E7%A8%8B/css/UI%E9%80%82%E9%85%8D/"/>
    <id>https://ansike.github.io/blog/programming/%E7%BC%96%E7%A8%8B/css/UI%E9%80%82%E9%85%8D/</id>
    <published>2023-08-06T07:58:24.000Z</published>
    <updated>2024-08-08T11:42:01.061Z</updated>
    
    <content type="html"><![CDATA[<h3 id="手机-H5-页面适配-PC-端"><a href="#手机-H5-页面适配-PC-端" class="headerlink" title="手机 H5 页面适配 PC 端"></a>手机 H5 页面适配 PC 端</h3><p>经常先有PC的页面后有H5的页面，现在是有H5的页面后要PC页面进行设置，而且PC页面需要基本和手机页面保持一致。</p><ol><li>使用 @media 进行样式重写，重写的内容包括：</li></ol><ul><li>width</li><li>height</li><li>border</li><li>margin</li><li>padding</li><li>font-size</li><li>top, right, bottom, left</li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@media</span> screen and (<span class="attribute">min-width</span>: <span class="number">600px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.login</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">padding-bottom</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">30px</span>;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.logo</span> &#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">30px</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">      <span class="attribute">margin</span>: <span class="number">20px</span> auto <span class="number">12px</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.title</span> &#123;</span><br><span class="line">      <span class="attribute">font-size</span>: <span class="number">10px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> screen and (<span class="attribute">min-width</span>: <span class="number">1800px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.login</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">padding-bottom</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.logo</span> &#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">20px</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">      <span class="attribute">margin</span>: <span class="number">20px</span> auto <span class="number">6px</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.title</span> &#123;</span><br><span class="line">      <span class="attribute">font-size</span>: <span class="number">8px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>使用 @media 对模块进行缩放</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断是否为手机设备</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isMobileDevice</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="regexp">/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i</span>.test(</span><br><span class="line">    navigator.userAgent</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否为PC设备</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">isPcDevice</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> !isMobileDevice();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 屏幕尺寸设置 这部分可以自己优雅</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getSize = <span class="function">(<span class="params">size = <span class="built_in">document</span>.body.clientWidth</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (size &gt; <span class="number">2000</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0.3</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (size &gt; <span class="number">1600</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0.4</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (size &gt; <span class="number">1200</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0.6</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0.7</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (isPcDevice()) &#123;</span><br><span class="line">  <span class="comment">// height 是 resizeClass dom 包含滚动条的高度</span></span><br><span class="line">  <span class="keyword">let</span> height = <span class="built_in">document</span>.querySelector(<span class="string">".resizeClass"</span>)?.scrollHeight;</span><br><span class="line">  <span class="keyword">while</span> (!height) &#123;</span><br><span class="line">    height = <span class="built_in">document</span>.querySelector(<span class="string">".resizeClass"</span>)?.scrollHeight;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将 resizeClass 的滚动条去除</span></span><br><span class="line">  <span class="built_in">document</span>.querySelector(<span class="string">".resizeClass"</span>).style.height = height + <span class="string">"PX"</span>;</span><br><span class="line">  <span class="comment">// 计算出新的 #app 的高度 </span></span><br><span class="line">  <span class="comment">// 计算 height 是 resizeClass dom scale之前的高度，把#app设置一样之后才不会有多余的空白</span></span><br><span class="line">  <span class="built_in">document</span>.querySelector(<span class="string">"#app"</span>).style.height = getSize() * height + <span class="string">"PX"</span>;</span><br><span class="line">  <span class="built_in">window</span>.addEventListener(<span class="string">"resize"</span>, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">window</span>.location.reload();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@media</span> screen and (<span class="attribute">min-width</span>: <span class="number">600px</span>) &#123;</span><br><span class="line">  <span class="selector-id">#app</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.resizeClass</span> &#123;</span><br><span class="line">    <span class="comment">// 页面缩放一样的比例</span></span><br><span class="line">    <span class="attribute">transform</span>: scale(<span class="number">0.7</span>, <span class="number">0.7</span>);</span><br><span class="line">    <span class="comment">// 页面缩放从顶部</span></span><br><span class="line">    <span class="attribute">transform-origin</span>: top;</span><br><span class="line">    <span class="comment">// 隐藏滚动条</span></span><br><span class="line">    <span class="attribute">overflow-x</span>: hidden;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> screen and (<span class="attribute">min-width</span>: <span class="number">1200px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.resizeClass</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: scale(<span class="number">0.6</span>, <span class="number">0.6</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> screen and (<span class="attribute">min-width</span>: <span class="number">1600px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.resizeClass</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: scale(<span class="number">0.4</span>, <span class="number">0.4</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> screen and (<span class="attribute">min-width</span>: <span class="number">2000px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.resizeClass</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: scale(<span class="number">0.3</span>, <span class="number">0.3</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;手机-H5-页面适配-PC-端&quot;&gt;&lt;a href=&quot;#手机-H5-页面适配-PC-端&quot; class=&quot;headerlink&quot; title=&quot;手机 H5 页面适配 PC 端&quot;&gt;&lt;/a&gt;手机 H5 页面适配 PC 端&lt;/h3&gt;&lt;p&gt;经常先有PC的页面后有H5的页面，现</summary>
      
    
    
    
    <category term="编程" scheme="https://ansike.github.io/blog/categories/programming/"/>
    
    
    <category term="手机端" scheme="https://ansike.github.io/blog/tags/%E6%89%8B%E6%9C%BA%E7%AB%AF/"/>
    
    <category term="PC端" scheme="https://ansike.github.io/blog/tags/PC%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>mysql 的锁</title>
    <link href="https://ansike.github.io/blog/programming/%E7%BC%96%E7%A8%8B/msyql/%E9%94%81/"/>
    <id>https://ansike.github.io/blog/programming/%E7%BC%96%E7%A8%8B/msyql/%E9%94%81/</id>
    <published>2023-07-19T15:29:55.000Z</published>
    <updated>2024-08-08T11:42:01.075Z</updated>
    
    <content type="html"><![CDATA[<p>mysql的锁定主要分为全局锁、表锁和行锁。</p><h5 id="全局锁"><a href="#全局锁" class="headerlink" title="全局锁"></a>全局锁</h5><p>mysql全局锁是针对整个数据库的锁，最常用的全局锁是读锁和写锁。</p><ul><li>读锁（共享锁）：阻止其他用户更新数据，但允许所有用户读取数据。数据库只读</li><li>写锁（排他锁）：阻止其他用户读取和更新数据。数据库不可读写</li></ul><p>全局锁的典型使用场景：全库备份，导出，数据库migration等</p><p>使用</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 添加全局读锁</span></span><br><span class="line"><span class="keyword">flush</span> <span class="keyword">tables</span> <span class="keyword">with</span> <span class="keyword">read</span> <span class="keyword">lock</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 解除锁定</span></span><br><span class="line"><span class="keyword">unlock</span> <span class="keyword">tables</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 锁表</span></span><br><span class="line"><span class="keyword">LOCK</span> <span class="keyword">TABLES</span> table_name1 WRITE, table_name2 WRITE, ...;</span><br></pre></td></tr></table></figure><p>注意：全局锁的开销非常大，因为它会组织其他所有的数据修改操作，并且在高并发情况下可能导致大量的线程等待锁定。因此应该尽量避免在生产环境使用全局锁，或者尽量减少全局锁的持有时间。</p><h4 id="实验全局锁"><a href="#实验全局锁" class="headerlink" title="实验全局锁"></a>实验全局锁</h4><p><strong>准备表和数据</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> (</span><br><span class="line">  <span class="keyword">id</span> <span class="built_in">INT</span> AUTO_INCREMENT PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">  <span class="keyword">name</span> <span class="built_in">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  age <span class="built_in">INT</span>,</span><br><span class="line">  occupation <span class="built_in">VARCHAR</span>(<span class="number">100</span>),</span><br><span class="line">  created_at <span class="built_in">TIMESTAMP</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span>,</span><br><span class="line">  updated_at <span class="built_in">TIMESTAMP</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CURRENT_TIMESTAMP</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">-- 插入两条数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`user`</span> <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">'zhangsan'</span>,<span class="number">12</span>,<span class="string">'code'</span>,<span class="keyword">CURRENT_TIMESTAMP</span>,<span class="keyword">CURRENT_TIMESTAMP</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`user`</span> (<span class="keyword">name</span>, age, occupation) <span class="keyword">values</span>(<span class="string">'zhangsan2'</span>,<span class="number">13</span>,<span class="string">'code'</span>);</span><br></pre></td></tr></table></figure><ol><li>设置读锁，检查当前连接和其他连接是否可以读+写<br>预期都能读，但是都不能写</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 全局读锁</span></span><br><span class="line"><span class="keyword">flush</span> <span class="keyword">tables</span> <span class="keyword">with</span> <span class="keyword">read</span> <span class="keyword">lock</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 在当前连接中继续读写</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span>;</span><br><span class="line"><span class="comment">-- +----+-----------+------+------------+---------------------+---------------------+</span></span><br><span class="line"><span class="comment">-- | id | name      | age  | occupation | created_at          | updated_at          |</span></span><br><span class="line"><span class="comment">-- +----+-----------+------+------------+---------------------+---------------------+</span></span><br><span class="line"><span class="comment">-- |  1 | zhangsan  |   12 | code       | 2023-07-19 14:35:45 | 2023-07-19 14:35:45 |</span></span><br><span class="line"><span class="comment">-- |  2 | zhangsan2 |   13 | code       | 2023-07-19 14:36:19 | 2023-07-19 14:36:19 |</span></span><br><span class="line"><span class="comment">-- +----+-----------+------+------------+---------------------+---------------------+</span></span><br><span class="line"><span class="comment">-- 2 rows in set (0.00 sec)</span></span><br><span class="line"><span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> <span class="keyword">name</span>=<span class="string">"zhangsan3"</span> <span class="keyword">where</span> <span class="keyword">id</span>=<span class="string">'1'</span>;</span><br><span class="line"><span class="comment">-- ERROR 1223 (HY000): Can't execute the query because you have a conflicting read lock</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 在新开连接中继续读写</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span>;</span><br><span class="line"><span class="comment">-- +----+-----------+------+------------+---------------------+---------------------+</span></span><br><span class="line"><span class="comment">-- | id | name      | age  | occupation | created_at          | updated_at          |</span></span><br><span class="line"><span class="comment">-- +----+-----------+------+------------+---------------------+---------------------+</span></span><br><span class="line"><span class="comment">-- |  1 | zhangsan  |   12 | code       | 2023-07-19 14:35:45 | 2023-07-19 14:35:45 |</span></span><br><span class="line"><span class="comment">-- |  2 | zhangsan2 |   13 | code       | 2023-07-19 14:36:19 | 2023-07-19 14:36:19 |</span></span><br><span class="line"><span class="comment">-- +----+-----------+------+------------+---------------------+---------------------+</span></span><br><span class="line"><span class="comment">-- 2 rows in set (0.00 sec)</span></span><br><span class="line"><span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> <span class="keyword">name</span>=<span class="string">"zhangsan3"</span> <span class="keyword">where</span> <span class="keyword">id</span>=<span class="string">'1'</span>;</span><br><span class="line"><span class="comment">-- 此时和上文报错的情况不一样了，只是会阻塞，不会直接报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 解除锁定</span></span><br><span class="line"><span class="keyword">unlock</span> <span class="keyword">tables</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 解除锁定之后新开的连接中断额update语句才会继续执行</span></span><br></pre></td></tr></table></figure><ol start="2"><li>设置写锁，检查当前连接和其他连接是否可以读+写</li></ol><p>语法报错，没有类似读锁的一条命令全部涵盖</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FLUSH</span> <span class="keyword">TABLES</span> <span class="keyword">WITH</span> WRITE <span class="keyword">LOCK</span>;</span><br></pre></td></tr></table></figure><p><strong>表锁</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 表锁</span></span><br><span class="line"><span class="keyword">lock</span> <span class="keyword">tables</span> <span class="keyword">user</span> write;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 在当前连接中继续读写 （都可以）</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span>;</span><br><span class="line"><span class="comment">-- +----+-----------+------+------------+---------------------+---------------------+</span></span><br><span class="line"><span class="comment">-- | id | name      | age  | occupation | created_at          | updated_at          |</span></span><br><span class="line"><span class="comment">-- +----+-----------+------+------------+---------------------+---------------------+</span></span><br><span class="line"><span class="comment">-- |  1 | zhangsan  |   12 | code       | 2023-07-19 14:35:45 | 2023-07-19 14:35:45 |</span></span><br><span class="line"><span class="comment">-- |  2 | zhangsan2 |   13 | code       | 2023-07-19 14:36:19 | 2023-07-19 14:36:19 |</span></span><br><span class="line"><span class="comment">-- +----+-----------+------+------------+---------------------+---------------------+</span></span><br><span class="line"><span class="comment">-- 2 rows in set (0.00 sec)</span></span><br><span class="line"><span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> <span class="keyword">name</span>=<span class="string">"zhangsan3"</span> <span class="keyword">where</span> <span class="keyword">id</span>=<span class="string">'1'</span>;</span><br><span class="line"><span class="comment">-- Query OK, 0 rows affected (0.00 sec)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 在新开连接中继续读写 都会pending</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span>;</span><br><span class="line"><span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> <span class="keyword">name</span>=<span class="string">"zhangsan3"</span> <span class="keyword">where</span> <span class="keyword">id</span>=<span class="string">'1'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 解除锁定</span></span><br><span class="line"><span class="keyword">unlock</span> <span class="keyword">tables</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 解除锁定之后新开的连接中断后select和update语句才会继续执行</span></span><br></pre></td></tr></table></figure><p><strong>其他命令</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查看MySQL数据库中当前存在的锁</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">OPEN</span> <span class="keyword">TABLES</span> <span class="keyword">WHERE</span> In_use &gt; <span class="number">0</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;mysql的锁定主要分为全局锁、表锁和行锁。&lt;/p&gt;
&lt;h5 id=&quot;全局锁&quot;&gt;&lt;a href=&quot;#全局锁&quot; class=&quot;headerlink&quot; title=&quot;全局锁&quot;&gt;&lt;/a&gt;全局锁&lt;/h5&gt;&lt;p&gt;mysql全局锁是针对整个数据库的锁，最常用的全局锁是读锁和写锁。&lt;/p</summary>
      
    
    
    
    <category term="编程" scheme="https://ansike.github.io/blog/categories/programming/"/>
    
    
    <category term="mysql" scheme="https://ansike.github.io/blog/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>模块和包</title>
    <link href="https://ansike.github.io/blog/programming/%E7%BC%96%E7%A8%8B/python/learn/chapter-14-module/"/>
    <id>https://ansike.github.io/blog/programming/%E7%BC%96%E7%A8%8B/python/learn/chapter-14-module/</id>
    <published>2023-07-11T16:01:10.000Z</published>
    <updated>2024-08-08T11:42:01.076Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是模块"><a href="#什么是模块" class="headerlink" title="什么是模块"></a>什么是模块</h3><p>在python中对变量，函数，类等进行包裹的集合</p><h3 id="自定义模块"><a href="#自定义模块" class="headerlink" title="自定义模块"></a>自定义模块</h3><p>python中一个py后缀的文件就是一个模块，名称尽量不要与python自带的标准模块名称相同</p><p>导入模块<br>import 模块名称 [as 别名]<br>from 模块名称 import 函数/类/变量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># calc.py</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">div</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> a / b</span><br><span class="line"></span><br><span class="line"><span class="comment"># test.py</span></span><br><span class="line"><span class="keyword">import</span> calc</span><br><span class="line"></span><br><span class="line">print(calc.add(<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line">print(calc.div(<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> calc <span class="keyword">import</span> add,div</span><br><span class="line"></span><br><span class="line">print(add(<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line">print(div(<span class="number">1</span>, <span class="number">2</span>))</span><br></pre></td></tr></table></figure><h3 id="以主程序的形式执行"><a href="#以主程序的形式执行" class="headerlink" title="以主程序的形式执行"></a>以主程序的形式执行</h3><p>使用该变量判断当前代码是否在主程序中运行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print(<span class="string">'calc'</span>)</span><br></pre></td></tr></table></figure><h3 id="python中的包"><a href="#python中的包" class="headerlink" title="python中的包"></a>python中的包</h3><p>包是一个分层次的目录结构，它将一组功能相近的模块组织在一个目录下<br><strong>作用：</strong></p><ul><li>代码规范</li><li>避免模块名称冲突</li></ul><p><strong>包与目录的区别：</strong></p><ul><li>包含<strong>init</strong>.py文件的目录称为包</li><li>目录里通常不包含该文件</li></ul><p><strong>包的导入</strong><br>import 包名.模块名</p><h3 id="第三方模块的安装及使用"><a href="#第三方模块的安装及使用" class="headerlink" title="第三方模块的安装及使用"></a>第三方模块的安装及使用</h3><p>安装：pip install 模块名<br>使用：import 模块名</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;什么是模块&quot;&gt;&lt;a href=&quot;#什么是模块&quot; class=&quot;headerlink&quot; title=&quot;什么是模块&quot;&gt;&lt;/a&gt;什么是模块&lt;/h3&gt;&lt;p&gt;在python中对变量，函数，类等进行包裹的集合&lt;/p&gt;
&lt;h3 id=&quot;自定义模块&quot;&gt;&lt;a href=&quot;#自定义模</summary>
      
    
    
    
    <category term="编程" scheme="https://ansike.github.io/blog/categories/programming/"/>
    
    
    <category term="python" scheme="https://ansike.github.io/blog/tags/python/"/>
    
    <category term="language" scheme="https://ansike.github.io/blog/tags/language/"/>
    
  </entry>
  
  <entry>
    <title>函数</title>
    <link href="https://ansike.github.io/blog/programming/%E7%BC%96%E7%A8%8B/python/learn/chapter-11-bug/"/>
    <id>https://ansike.github.io/blog/programming/%E7%BC%96%E7%A8%8B/python/learn/chapter-11-bug/</id>
    <published>2023-07-10T16:28:51.000Z</published>
    <updated>2024-08-08T11:42:01.076Z</updated>
    
    <content type="html"><![CDATA[<h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><ul><li>SyntaxError</li><li>IndexError 索引错误</li><li>KeyError 映射中没有键</li><li>NameError 未声明/初始化对象</li><li>ValueError 传入无效的参数</li><li>ZeroDivisionError 除/模 0</li></ul><h3 id="异常处理机制"><a href="#异常处理机制" class="headerlink" title="异常处理机制"></a>异常处理机制</h3><p>try-except<br>可以有多个except</p><p>try-except-else-finally<br>excpety和else二者仅执行一种</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    a = int(input(<span class="string">"请输入一个整数"</span>))</span><br><span class="line">    b = int(input(<span class="string">"请输入另一个整数"</span>))</span><br><span class="line">    c = a / b</span><br><span class="line">    print(c)</span><br><span class="line"><span class="keyword">except</span> ValueError:</span><br><span class="line">    print(<span class="string">'参数必须是整数'</span>)</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">    print(<span class="string">'被除数不能是0'</span>)</span><br><span class="line"><span class="keyword">except</span> BaseException <span class="keyword">as</span> e:</span><br><span class="line">    print(<span class="string">'未知异常'</span>, e)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'else'</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    print(<span class="string">'done'</span>)</span><br><span class="line"><span class="comment"># 请输入一个整数1</span></span><br><span class="line"><span class="comment"># 请输入另一个整数2</span></span><br><span class="line"><span class="comment"># 0.5</span></span><br><span class="line"><span class="comment"># else</span></span><br><span class="line"><span class="comment"># done</span></span><br><span class="line"><span class="comment"># -------- 第二种</span></span><br><span class="line"><span class="comment"># 请输入一个整数1</span></span><br><span class="line"><span class="comment"># 请输入另一个整数0</span></span><br><span class="line"><span class="comment"># 被除数不能是0</span></span><br><span class="line"><span class="comment"># done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 异常写入日志</span></span><br><span class="line"><span class="keyword">import</span> traceback</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(<span class="number">10</span>/<span class="number">0</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    traceback.print_exc()</span><br></pre></td></tr></table></figure><h3 id="PyCharm的调试模式"><a href="#PyCharm的调试模式" class="headerlink" title="PyCharm的调试模式"></a>PyCharm的调试模式</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;分类&quot;&gt;&lt;a href=&quot;#分类&quot; class=&quot;headerlink&quot; title=&quot;分类&quot;&gt;&lt;/a&gt;分类&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;SyntaxError&lt;/li&gt;
&lt;li&gt;IndexError 索引错误&lt;/li&gt;
&lt;li&gt;KeyError 映射中没有键&lt;/l</summary>
      
    
    
    
    <category term="编程" scheme="https://ansike.github.io/blog/categories/programming/"/>
    
    
    <category term="python" scheme="https://ansike.github.io/blog/tags/python/"/>
    
    <category term="language" scheme="https://ansike.github.io/blog/tags/language/"/>
    
  </entry>
  
  <entry>
    <title>类与对象</title>
    <link href="https://ansike.github.io/blog/programming/%E7%BC%96%E7%A8%8B/python/learn/chapter-12-class/"/>
    <id>https://ansike.github.io/blog/programming/%E7%BC%96%E7%A8%8B/python/learn/chapter-12-class/</id>
    <published>2023-07-10T16:28:51.000Z</published>
    <updated>2024-08-08T11:42:01.076Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>:</span></span><br><span class="line">    native_pace = <span class="string">'阿斯顿'</span>  <span class="comment"># 类属性</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age)</span>:</span></span><br><span class="line">        self.name = name  <span class="comment"># 实例属性</span></span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 实例方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"学生在吃饭"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 静态方法</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">method</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">"我使用了staticmethod修饰，所以我是静态方法"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 类方法</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">cm</span><span class="params">(cls)</span>:</span></span><br><span class="line">        print(<span class="string">"我使用了classmethod修饰，所以我是类方法"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">stu1 = Student(<span class="string">'张三1'</span>, <span class="number">12</span>)</span><br><span class="line">stu2 = Student(<span class="string">'张三2'</span>, <span class="number">13</span>)</span><br><span class="line">stu1.eat()</span><br><span class="line">print(stu1.native_pace)</span><br><span class="line">print(stu2.native_pace)</span><br><span class="line">Student.native_pace=<span class="string">'xxx'</span></span><br><span class="line">print(stu1.native_pace)</span><br><span class="line">print(stu2.native_pace)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas</summary>
      
    
    
    
    <category term="编程" scheme="https://ansike.github.io/blog/categories/programming/"/>
    
    
    <category term="python" scheme="https://ansike.github.io/blog/tags/python/"/>
    
    <category term="language" scheme="https://ansike.github.io/blog/tags/language/"/>
    
  </entry>
  
  <entry>
    <title>函数</title>
    <link href="https://ansike.github.io/blog/programming/%E7%BC%96%E7%A8%8B/python/learn/chapter-10-func/"/>
    <id>https://ansike.github.io/blog/programming/%E7%BC%96%E7%A8%8B/python/learn/chapter-10-func/</id>
    <published>2023-07-10T16:28:51.000Z</published>
    <updated>2024-08-08T11:42:01.076Z</updated>
    
    <content type="html"><![CDATA[<h3 id="函数的创建和调用"><a href="#函数的创建和调用" class="headerlink" title="函数的创建和调用"></a>函数的创建和调用</h3><p>def 函数名([参数]):<br>    函数体<br>    [return xxx]</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">print(calc(<span class="number">10</span>, <span class="number">20</span>))</span><br></pre></td></tr></table></figure><h3 id="函数的参数传递"><a href="#函数的参数传递" class="headerlink" title="函数的参数传递"></a>函数的参数传递</h3><p>形参，实参和其他语言一致<br><strong>传递方式：</strong></p><ul><li>位置实参 calc(10,20)</li><li>关键字实参 calc(a=10, b=20) 顺序可以调换</li></ul><h3 id="函数的返回值"><a href="#函数的返回值" class="headerlink" title="函数的返回值"></a>函数的返回值</h3><p>多个返回为元组，一个返回为原类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    odd = []</span><br><span class="line">    even = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>):</span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">            even.append(i)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            odd.append(i)</span><br><span class="line">    <span class="keyword">return</span> odd, even</span><br><span class="line"></span><br><span class="line">print(main())</span><br><span class="line"><span class="comment"># ([1, 3, 5, 7, 9], [2, 4, 6, 8, 10])</span></span><br></pre></td></tr></table></figure><h3 id="函数的参数定义"><a href="#函数的参数定义" class="headerlink" title="函数的参数定义"></a>函数的参数定义</h3><ul><li>默认参数和其他语言类似，在形参上定义默认值</li><li>个数可变的位置参数 def func(*args) args为元组</li><li>个数可变的关键字形参  def func(**args) args为字典</li></ul><p>函数定义中个数可变的位置参数和关键字形参都存在时，位置上参数必须放前边<br>参数中某个位置有<em>，</em>之后的参数只能采用关键字参数传递</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(a, b, c)</span>:</span></span><br><span class="line">    print(<span class="string">'a'</span>, a)</span><br><span class="line">    print(<span class="string">'b'</span>, b)</span><br><span class="line">    print(<span class="string">'c'</span>, c)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">lst = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">func(*lst)</span><br><span class="line"><span class="comment"># a 1</span></span><br><span class="line"><span class="comment"># b 2</span></span><br><span class="line"><span class="comment"># c 3</span></span><br><span class="line"></span><br><span class="line">map = &#123;<span class="string">'a'</span>: <span class="number">12</span>, <span class="string">'b'</span>: <span class="number">23</span>, <span class="string">'c'</span>: <span class="number">12</span>&#125;</span><br><span class="line">func(**map)</span><br><span class="line"><span class="comment"># a 12</span></span><br><span class="line"><span class="comment"># b 23</span></span><br><span class="line"><span class="comment"># c 12</span></span><br></pre></td></tr></table></figure><h3 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="变量的作用域"></a>变量的作用域</h3><p>局部变量和全局变量和其他语言类似</p><p>有不一样的地方，可以在函数是内部通过global字段标识一个变量为全局变量，这个能力个人感觉不好</p><h3 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 阶乘</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n &lt;= <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> n</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> n * main(n - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(main(<span class="number">6</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 斐波那契数列</span></span><br><span class="line"><span class="comment"># 1，1，2，3，5....</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span> <span class="keyword">or</span> n == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> main(n - <span class="number">1</span>) + main(n - <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(main(<span class="number">6</span>))</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;函数的创建和调用&quot;&gt;&lt;a href=&quot;#函数的创建和调用&quot; class=&quot;headerlink&quot; title=&quot;函数的创建和调用&quot;&gt;&lt;/a&gt;函数的创建和调用&lt;/h3&gt;&lt;p&gt;def 函数名([参数]):&lt;br&gt;    函数体&lt;br&gt;    [return xxx]&lt;</summary>
      
    
    
    
    <category term="编程" scheme="https://ansike.github.io/blog/categories/programming/"/>
    
    
    <category term="python" scheme="https://ansike.github.io/blog/tags/python/"/>
    
    <category term="language" scheme="https://ansike.github.io/blog/tags/language/"/>
    
  </entry>
  
  <entry>
    <title>封装，继承，多态</title>
    <link href="https://ansike.github.io/blog/programming/%E7%BC%96%E7%A8%8B/python/learn/chapter-13-object/"/>
    <id>https://ansike.github.io/blog/programming/%E7%BC%96%E7%A8%8B/python/learn/chapter-13-object/</id>
    <published>2023-07-10T16:28:51.000Z</published>
    <updated>2024-08-08T11:42:01.076Z</updated>
    
    <content type="html"><![CDATA[<p><strong>面向对象的三大特征</strong></p><ul><li>封装：提高程序的安全性</li><li>继承：提高复用</li><li>多态：可扩展性和可维护性</li></ul><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.__age = age  <span class="comment"># age 不被外边访问，所以加了__</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(self.name, self.__age)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">stu = Student(<span class="string">'xxx'</span>, <span class="number">12</span>)</span><br><span class="line"></span><br><span class="line">print(stu.name)</span><br><span class="line">print(dir(stu))</span><br><span class="line"><span class="comment"># 通过该方法读取 私有age</span></span><br><span class="line">print(stu._Student__age)</span><br><span class="line">stu.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># xxx</span></span><br><span class="line"><span class="comment"># ['_Student__age', '__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', 'name', 'show']</span></span><br><span class="line"><span class="comment"># 12</span></span><br><span class="line"><span class="comment"># xxx 12</span></span><br></pre></td></tr></table></figure><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">f'姓名:<span class="subst">&#123;self.name&#125;</span>，年龄:<span class="subst">&#123;self.age&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(Person)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age, score)</span>:</span></span><br><span class="line">        super().__init__(name, age)</span><br><span class="line">        self.score = score</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span><span class="params">(Person)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age)</span>:</span></span><br><span class="line">        super().__init__(name, age)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 方法重写</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().info()</span><br><span class="line">        print(<span class="string">f'我是老师，我的名字是<span class="subst">&#123;self.name&#125;</span>,我的年龄是:<span class="subst">&#123;self.age&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">stu = Student(<span class="string">'xxx'</span>, <span class="number">12</span>, <span class="number">122</span>)</span><br><span class="line">teacher = Teacher(<span class="string">'老师'</span>, <span class="number">23</span>)</span><br><span class="line">stu.info()</span><br><span class="line">teacher.info()</span><br><span class="line"><span class="comment"># 姓名:xxx，年龄:12</span></span><br><span class="line"><span class="comment"># 姓名:老师，年龄:23</span></span><br></pre></td></tr></table></figure><h3 id="object类"><a href="#object类" class="headerlink" title="object类"></a>object类</h3><ul><li>object类是所有类的父类，因此所有的类都有object类的属性和方法</li><li>内置函数dir()可以查看指定对象所有属性</li><li>object有一个<strong>str</strong>()方法，用于返回一个对于“对象的描述”，对应于内置函数str()经常用于print()方法，帮助我们查看对象的信息，所以我们经常会对<strong>str</strong>()进行重写</li></ul><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">(Animal)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'狗吃肉'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span><span class="params">(Animal)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'猫吃老鼠'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'人吃饭'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(animal)</span>:</span></span><br><span class="line">    animal.eat()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fun(Dog())</span><br><span class="line">fun(Cat())</span><br><span class="line">fun(Person())</span><br><span class="line"><span class="comment"># 狗吃肉</span></span><br><span class="line"><span class="comment"># 猫吃老鼠</span></span><br><span class="line"><span class="comment"># 人吃饭</span></span><br></pre></td></tr></table></figure><h3 id="特殊的方法和属性"><a href="#特殊的方法和属性" class="headerlink" title="特殊的方法和属性"></a>特殊的方法和属性</h3><ul><li><strong>dict</strong> 获得类对象或者实例对象所绑定的所有属性和方法的字典</li><li><strong>len</strong>() 通过重写该方法可以让内置函数len的参数可以是自定义类型</li><li><strong>add</strong>() 通过重写该方法可使自定义对象具有“+”功能</li><li><strong>new</strong>() 用于创建对象</li><li><strong>init</strong>() 对创建的对象进行初始化</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__add__</span><span class="params">(self, other)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name + other.name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__len__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> len(self.name)</span><br><span class="line"></span><br><span class="line">stu1 = Student(<span class="string">'1111'</span>)</span><br><span class="line">stu2 = Student(<span class="string">'2222'</span>)</span><br><span class="line"></span><br><span class="line">print(stu1 + stu2)</span><br><span class="line"><span class="comment"># 11112222</span></span><br><span class="line"></span><br><span class="line">print(stu1.__len__()) <span class="comment"># 4</span></span><br></pre></td></tr></table></figure><h3 id="浅拷贝与深拷贝"><a href="#浅拷贝与深拷贝" class="headerlink" title="浅拷贝与深拷贝"></a>浅拷贝与深拷贝</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Name</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">stu1 = Student(Name())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 浅拷贝</span></span><br><span class="line">stu2 = copy.copy(stu1)</span><br><span class="line"></span><br><span class="line">print(stu1, stu1.name)</span><br><span class="line">print(stu2, stu2.name)</span><br><span class="line"><span class="comment"># &lt;__main__.Student object at 0x00000232CD9B7710&gt; &lt;__main__.Name object at 0x00000232CD9B6AD0&gt;</span></span><br><span class="line"><span class="comment"># &lt;__main__.Student object at 0x00000232CD9B6B50&gt; &lt;__main__.Name object at 0x00000232CD9B6AD0&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">stu3 = copy.deepcopy(stu1)</span><br><span class="line">print(stu1, stu1.name)</span><br><span class="line">print(stu3, stu3.name)</span><br><span class="line"><span class="comment"># &lt;__main__.Student object at 0x00000232CD9B7710&gt; &lt;__main__.Name object at 0x00000232CD9B6AD0&gt;</span></span><br><span class="line"><span class="comment"># &lt;__main__.Student object at 0x00000232CD9B7850&gt; &lt;__main__.Name object at 0x00000232CD9DE610&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;面向对象的三大特征&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;封装：提高程序的安全性&lt;/li&gt;
&lt;li&gt;继承：提高复用&lt;/li&gt;
&lt;li&gt;多态：可扩展性和可维护性&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;封装&quot;&gt;&lt;a href=&quot;#封装&quot; class=&quot;he</summary>
      
    
    
    
    <category term="编程" scheme="https://ansike.github.io/blog/categories/programming/"/>
    
    
    <category term="python" scheme="https://ansike.github.io/blog/tags/python/"/>
    
    <category term="language" scheme="https://ansike.github.io/blog/tags/language/"/>
    
  </entry>
  
  <entry>
    <title>元组和集合</title>
    <link href="https://ansike.github.io/blog/programming/%E7%BC%96%E7%A8%8B/python/learn/chapter-8-tuple-set/"/>
    <id>https://ansike.github.io/blog/programming/%E7%BC%96%E7%A8%8B/python/learn/chapter-8-tuple-set/</id>
    <published>2023-07-08T16:18:44.000Z</published>
    <updated>2024-08-08T11:42:01.077Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是元组"><a href="#什么是元组" class="headerlink" title="什么是元组"></a>什么是元组</h3><p>是python内置的数据结构之一，是一个不可变序列</p><p>不可变序列（没有增删改的操作）：字符串，元组<br>可变序列（增删改操后对象地址不变）：列表，字典，集合</p><h3 id="元组的创建方式"><a href="#元组的创建方式" class="headerlink" title="元组的创建方式"></a>元组的创建方式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 对象字面量</span></span><br><span class="line">t1 = (<span class="string">'a'</span>, <span class="string">'b'</span>)</span><br><span class="line">print(t1)</span><br><span class="line">print(type(t1))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 内置函数tuple</span></span><br><span class="line">t2 = tuple((<span class="string">'a'</span>, <span class="string">'b'</span>))</span><br><span class="line">print(t2)</span><br><span class="line">print(type(t2))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对象字面量</span></span><br><span class="line"><span class="comment"># t3 = ('a')  # 元组只有一个元素且是字符串时会被认为是一个字符串,此时需要增加逗号</span></span><br><span class="line">t3 = (<span class="string">'a'</span>,) </span><br><span class="line">print(t3)</span><br><span class="line">print(type(t3))</span><br></pre></td></tr></table></figure><h3 id="元组的遍历"><a href="#元组的遍历" class="headerlink" title="元组的遍历"></a>元组的遍历</h3><p>使用for-in遍历</p><h3 id="什么是集合"><a href="#什么是集合" class="headerlink" title="什么是集合"></a>什么是集合</h3><p>属于可变序列<br>集合是没有value的字典</p><h3 id="集合的创建"><a href="#集合的创建" class="headerlink" title="集合的创建"></a>集合的创建</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s1=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">print(s1)</span><br><span class="line"></span><br><span class="line">s2=set(range(<span class="number">6</span>))</span><br><span class="line">print(s2)</span><br></pre></td></tr></table></figure><h3 id="集合的增删改查"><a href="#集合的增删改查" class="headerlink" title="集合的增删改查"></a>集合的增删改查</h3><ul><li>存在判断 in, not in</li><li>新增操作 add()</li><li>更新操作 update()</li><li>删除操作 <ul><li>remove 删除指定元素，不存在抛错 keyError</li><li>discard 删除指定元素，不存在不抛错</li><li>pop 一次只删除任意元素</li><li>clear 清空集合<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">s2=set(range(<span class="number">6</span>))</span><br><span class="line">print(s2)</span><br><span class="line"></span><br><span class="line">print(<span class="number">1</span> <span class="keyword">in</span> s2)</span><br><span class="line">print(<span class="number">1</span> <span class="keyword">not</span> <span class="keyword">in</span> s2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新增</span></span><br><span class="line">s2.add(<span class="number">200</span>)</span><br><span class="line">print(s2)  <span class="comment"># &#123;0, 1, 2, 3, 4, 5, 200&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新</span></span><br><span class="line">s2.update([<span class="number">100</span>, <span class="number">21</span>, <span class="number">123</span>])</span><br><span class="line">print(s2)  <span class="comment"># &#123;0, 1, 2, 3, 4, 5, 100, 200, 21, 123&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除</span></span><br><span class="line">s2.remove(<span class="number">100</span>)</span><br><span class="line">print(s2)  <span class="comment"># &#123;0, 1, 2, 3, 4, 5, 200, 21, 123&#125;</span></span><br><span class="line">s2.discard(<span class="number">400</span>)</span><br><span class="line">print(s2)  <span class="comment"># &#123;0, 1, 2, 3, 4, 5, 200, 21, 123&#125;</span></span><br><span class="line">s2.pop()</span><br><span class="line">print(s2)  <span class="comment"># &#123;1, 2, 3, 4, 5, 200, 21, 123&#125;</span></span><br><span class="line">s2.clear()</span><br><span class="line">print(s2)  <span class="comment"># set()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 集合之间的关系</span></span><br><span class="line">ss1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">ss2 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">print(ss1 == ss2)  <span class="comment"># True</span></span><br><span class="line">print(ss1 != ss2)  <span class="comment"># False</span></span><br><span class="line">print(ss1.issubset(ss2))  <span class="comment"># True</span></span><br><span class="line">print(ss1.issuperset(ss2))  <span class="comment"># True</span></span><br><span class="line">print(ss1.isdisjoint(ss2))  <span class="comment"># False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 集合之间的数学操作</span></span><br><span class="line">sss1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>&#125;</span><br><span class="line">sss2 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"><span class="comment"># 交集</span></span><br><span class="line">print(sss1.intersection(sss2))  <span class="comment"># &#123;1, 2&#125;</span></span><br><span class="line">print(sss1 &amp; sss2)  <span class="comment"># &#123;1, 2&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 并集</span></span><br><span class="line">print(sss1.union(sss2))  <span class="comment"># &#123;1, 2, 3, 4&#125;</span></span><br><span class="line">print(sss1 | sss2)  <span class="comment"># &#123;1, 2, 3, 4&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 差集</span></span><br><span class="line">print(sss1.difference(sss2))  <span class="comment"># &#123;4&#125;</span></span><br><span class="line">print(sss1 - sss2)  <span class="comment"># &#123;4&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对称</span></span><br><span class="line">print(sss1.symmetric_difference(sss2))  <span class="comment"># &#123;3, 4&#125;</span></span><br><span class="line">print(sss1 ^ sss2)  <span class="comment"># &#123;3, 4&#125;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="集合生成式"><a href="#集合生成式" class="headerlink" title="集合生成式"></a>集合生成式</h3><p>s={ i for i in range(10) }</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;什么是元组&quot;&gt;&lt;a href=&quot;#什么是元组&quot; class=&quot;headerlink&quot; title=&quot;什么是元组&quot;&gt;&lt;/a&gt;什么是元组&lt;/h3&gt;&lt;p&gt;是python内置的数据结构之一，是一个不可变序列&lt;/p&gt;
&lt;p&gt;不可变序列（没有增删改的操作）：字符串，元组&lt;br</summary>
      
    
    
    
    <category term="编程" scheme="https://ansike.github.io/blog/categories/programming/"/>
    
    
    <category term="python" scheme="https://ansike.github.io/blog/tags/python/"/>
    
    <category term="language" scheme="https://ansike.github.io/blog/tags/language/"/>
    
  </entry>
  
  <entry>
    <title>字符串</title>
    <link href="https://ansike.github.io/blog/programming/%E7%BC%96%E7%A8%8B/python/learn/chapter-9-str/"/>
    <id>https://ansike.github.io/blog/programming/%E7%BC%96%E7%A8%8B/python/learn/chapter-9-str/</id>
    <published>2023-07-08T16:18:44.000Z</published>
    <updated>2024-08-08T11:42:01.077Z</updated>
    
    <content type="html"><![CDATA[<h3 id="字符串的驻留机制"><a href="#字符串的驻留机制" class="headerlink" title="字符串的驻留机制"></a>字符串的驻留机制</h3><p>仅保留一份且不可变的字符串的方法。不同的值被存放在字符串的驻留池中，python的驻留机制对相同的字符串只保留一份拷贝，后续创建相同字符串是，不会开辟新空间，而是把字符串的地址赋给新创建的变量</p><p>如以下三个变量执行的是相同的内存地址<br>a=”a”<br>b=’a’<br>c=’’’a’’’</p><h3 id="字符串的常用操作"><a href="#字符串的常用操作" class="headerlink" title="字符串的常用操作"></a>字符串的常用操作</h3><ol><li>查询操作<ul><li>index() 查找子串substr第一次出现的位置，如果查找的字串不存在时，抛出ValueError</li><li>rindex() 查找子串substr最后一次出现的位置，如果查找的子串不存在时，则抛出ValueError</li><li>find() 查找子串substr第一次出现的位置，如果查找的字串不存在时，返回-1</li><li>rfind() 查找子串substr最后一次出现的位置，如果查找的子串不存在时，返回-1</li></ul></li><li>大小写转换<ul><li>upper() 全部大写</li><li>lower() 全部小写</li><li>swapcase() 大小写调换</li><li>capitalize() 第一个字符大写，其他小写</li><li>title() 大驼峰</li></ul></li><li>内容对齐操作<ul><li>center() 居中对齐，第一个参数指定宽度，第二个参数指定填充符，默认是空格，如果设置宽度小于实际宽度则返回原字符串</li><li>ljust() 左对齐，第一个参数指定宽度，第二个参数指定填充符，默认是空格，如果设置宽度小于实际宽度则返回原字符串</li><li>rjust() 右对齐，第一个参数指定宽度，第二个参数指定填充符，默认是空格，如果设置宽度小于实际宽度则返回原字符串</li><li>zfill() 右对齐，左边用0填充，只接受字符串的宽度，如果设置宽度小于实际宽度则返回原字符串</li></ul></li><li>切割字符串<ul><li>split() <ul><li>从字符串的左边开始切割，默认的切割符是空字符串，会把字符串切割成一个列表</li><li>通过sep指定切割符</li><li>通过maxsplit指定切割字符串时的最大切割次数，超过最大值后的子串作为单独的一部分</li></ul></li><li>rsplit 从右边开始切割</li></ul></li><li>判断字符串的方法<ul><li>isidentifier() 判断指定的字符串是不是合法的标识符</li><li>isspace() 判断字符串是否都是空白符组成（回车，换行，制表）</li><li>isalpha() 是否全是字母</li><li>isdecimal() 是否全是十进制数字</li><li>isnumeric() 是否全是数字</li><li>isalnum() 是否全是字母和数字</li></ul></li><li>字符串替换 replace() 第一个参数指定被替换的子串，第二个指定替换之后的字符串，第三个参数指定替换的最大次数</li><li>字符串合并 join() 将列表或元组中的字符串合并成一个字符串</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">s=<span class="string">"ajskdhggjkahgg"</span></span><br><span class="line">print(s.index(<span class="string">'gg'</span>))</span><br><span class="line">print(s.rindex(<span class="string">'gg'</span>))</span><br><span class="line">print(s.find(<span class="string">'gg'</span>))</span><br><span class="line">print(s.rfind(<span class="string">'gg'</span>))</span><br><span class="line"><span class="comment"># 6</span></span><br><span class="line"><span class="comment"># 12</span></span><br><span class="line"><span class="comment"># 6</span></span><br><span class="line"><span class="comment"># 12</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 大小写</span></span><br><span class="line">s = <span class="string">"hello woRld"</span></span><br><span class="line">print(s.upper())</span><br><span class="line">print(s.lower())</span><br><span class="line">print(s.swapcase())</span><br><span class="line">print(s.capitalize())</span><br><span class="line">print(s.title())</span><br><span class="line"><span class="comment"># HELLO WORLD</span></span><br><span class="line"><span class="comment"># hello world</span></span><br><span class="line"><span class="comment"># HELLO WOrLD</span></span><br><span class="line"><span class="comment"># Hello world</span></span><br><span class="line"><span class="comment"># Hello World</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 内容对齐</span></span><br><span class="line">s = <span class="string">"hello world"</span></span><br><span class="line">print(s.center(<span class="number">20</span>))</span><br><span class="line">print(s.ljust(<span class="number">20</span>))</span><br><span class="line">print(s.rjust(<span class="number">20</span>))</span><br><span class="line">print(s.zfill(<span class="number">20</span>))</span><br><span class="line"><span class="comment">#     hello world</span></span><br><span class="line"><span class="comment"># hello world</span></span><br><span class="line"><span class="comment">#          hello world</span></span><br><span class="line"><span class="comment"># 000000000hello world</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符串切割</span></span><br><span class="line">s = <span class="string">"hello world"</span></span><br><span class="line">print(s.split())</span><br><span class="line">print(s.split(sep=<span class="string">'o'</span>))</span><br><span class="line">print(s.split(sep=<span class="string">'o'</span>, maxsplit=<span class="number">1</span>))</span><br><span class="line"><span class="comment"># ['hello', 'world']</span></span><br><span class="line"><span class="comment"># ['hell', ' w', 'rld']</span></span><br><span class="line"><span class="comment"># ['hell', ' world']</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符串组成判断</span></span><br><span class="line">s = <span class="string">"hello world"</span></span><br><span class="line">s1 = <span class="string">'1232354'</span></span><br><span class="line">s2 = <span class="string">'asda1232354'</span></span><br><span class="line">s3 = <span class="string">''</span> \</span><br><span class="line">     <span class="string">'    '</span></span><br><span class="line">print(s.isidentifier()) <span class="comment"># 合法的标识符是字母数字下划线</span></span><br><span class="line">print(s3.isspace())</span><br><span class="line">print(s.isalpha())</span><br><span class="line">print(s1.isdecimal())</span><br><span class="line">print(s1.isnumeric())</span><br><span class="line">print(s2.isalnum())</span><br><span class="line"><span class="comment"># False</span></span><br><span class="line"><span class="comment"># True</span></span><br><span class="line"><span class="comment"># False</span></span><br><span class="line"><span class="comment"># True</span></span><br><span class="line"><span class="comment"># True</span></span><br><span class="line"><span class="comment"># True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符串替换</span></span><br><span class="line">s = <span class="string">"hello world wll azz"</span></span><br><span class="line">print(s.replace(<span class="string">'ll'</span>,<span class="string">'xx'</span>))</span><br><span class="line">print(s.replace(<span class="string">'ll'</span>,<span class="string">'xx'</span>,<span class="number">1</span>))</span><br><span class="line"><span class="comment"># hexxo world wxx azz</span></span><br><span class="line"><span class="comment"># hexxo world wll azz</span></span><br><span class="line"></span><br><span class="line">lst=[<span class="string">'1'</span>,<span class="string">'b'</span>]</span><br><span class="line">print(<span class="string">''</span>.join(lst))</span><br><span class="line"><span class="comment"># 1b</span></span><br></pre></td></tr></table></figure><h3 id="字符串的比较"><a href="#字符串的比较" class="headerlink" title="字符串的比较"></a>字符串的比较</h3><ul><li>运算符 &gt;,&lt;,&gt;=,&lt;=,==,!=</li><li>比较规则 从头开始依次比较字符串</li><li>比较原理 字符串比较的是原始值，调用内置函数ord可以得到指定字符的ordinal value（ASSCII）</li></ul><h3 id="字符串的切片操作"><a href="#字符串的切片操作" class="headerlink" title="字符串的切片操作"></a>字符串的切片操作</h3><p>字符串是不可变类型，不具备增删改等操作，切片操作将产生新的对象</p><h1 id="字符串切片"><a href="#字符串切片" class="headerlink" title="字符串切片"></a>字符串切片</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 字符串切片</span></span><br><span class="line">s = <span class="string">"hello world wll azz"</span></span><br><span class="line">print(s[<span class="number">6</span>:])</span><br><span class="line">print(s[:<span class="number">5</span>])</span><br><span class="line">print(s[:<span class="number">5</span>:<span class="number">2</span>])</span><br><span class="line"><span class="comment"># world wll azz</span></span><br><span class="line"><span class="comment"># hello</span></span><br><span class="line"><span class="comment"># hlo</span></span><br></pre></td></tr></table></figure><h3 id="格式化字符串"><a href="#格式化字符串" class="headerlink" title="格式化字符串"></a>格式化字符串</h3><ol><li>%占位符 </li><li>{}占位符</li><li>模板字符串 f</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">'xxx'</span></span><br><span class="line">age = <span class="number">12</span></span><br><span class="line">print(<span class="string">'我是%s, 今年%d'</span> % (name, age))</span><br><span class="line">print(<span class="string">'我是&#123;0&#125;, 今年&#123;1&#125;'</span>.format(name, age))</span><br><span class="line">print(<span class="string">f'我是<span class="subst">&#123;name&#125;</span>, 今年<span class="subst">&#123;age&#125;</span>'</span>)</span><br><span class="line"><span class="comment"># 我是xxx, 今年12</span></span><br></pre></td></tr></table></figure><h3 id="字符串的编码转换"><a href="#字符串的编码转换" class="headerlink" title="字符串的编码转换"></a>字符串的编码转换</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">'海上生明月'</span></span><br><span class="line"><span class="comment"># 编码</span></span><br><span class="line">print(s.encode(encoding=<span class="string">'GBK'</span>))  <span class="comment"># 一个中文两个字节 b'\xba\xa3\xc9\xcf\xc9\xfa\xc3\xf7\xd4\xc2'</span></span><br><span class="line">print(s.encode(encoding=<span class="string">'UTF-8'</span>))  <span class="comment"># 一个中文三个字节 b'\xe6\xb5\xb7\xe4\xb8\x8a\xe7\x94\x9f\xe6\x98\x8e\xe6\x9c\x88'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解码</span></span><br><span class="line">byte = s.encode(encoding=<span class="string">'GBK'</span>)</span><br><span class="line">print(byte.decode(encoding=<span class="string">'GBK'</span>))  <span class="comment"># 海上生明月</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;字符串的驻留机制&quot;&gt;&lt;a href=&quot;#字符串的驻留机制&quot; class=&quot;headerlink&quot; title=&quot;字符串的驻留机制&quot;&gt;&lt;/a&gt;字符串的驻留机制&lt;/h3&gt;&lt;p&gt;仅保留一份且不可变的字符串的方法。不同的值被存放在字符串的驻留池中，python的驻留机制对</summary>
      
    
    
    
    <category term="编程" scheme="https://ansike.github.io/blog/categories/programming/"/>
    
    
    <category term="python" scheme="https://ansike.github.io/blog/tags/python/"/>
    
    <category term="language" scheme="https://ansike.github.io/blog/tags/language/"/>
    
  </entry>
  
  <entry>
    <title>字典</title>
    <link href="https://ansike.github.io/blog/programming/%E7%BC%96%E7%A8%8B/python/learn/chapter-7-dict/"/>
    <id>https://ansike.github.io/blog/programming/%E7%BC%96%E7%A8%8B/python/learn/chapter-7-dict/</id>
    <published>2023-07-08T10:05:37.000Z</published>
    <updated>2024-08-08T11:42:01.077Z</updated>
    
    <content type="html"><![CDATA[<h3 id="字典的概念"><a href="#字典的概念" class="headerlink" title="字典的概念"></a>字典的概念</h3><p>类似于java和js中的map</p><h3 id="字典操作"><a href="#字典操作" class="headerlink" title="字典操作"></a>字典操作</h3><ol><li>创建字典可以通过花括号语法以声明的方式创建，也可以通过dict函数通过命令的方式创建</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 声明式创建字典</span></span><br><span class="line">map = &#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>&#125;</span><br><span class="line">print(map, id(map))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 命令式创建字典</span></span><br><span class="line">map2 = dict(&#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>&#125;)</span><br><span class="line">print(map2, id(map2))</span><br></pre></td></tr></table></figure><ol start="2"><li>获取字典内容</li></ol><ul><li>[]语法 map[‘xxx’] 值不存在会抛出异常 keyError</li><li>get()方法 map.get(‘xxx’) 值不存在会返回None， 可以通过参数设置上默认的值</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">map2 = dict(&#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>&#125;)</span><br><span class="line">print(map2[<span class="string">'a'</span>])</span><br><span class="line">print(map2.get(<span class="string">'a'</span>))</span><br><span class="line"><span class="comment"># print(map2['c']) # 会抛错</span></span><br><span class="line">print(map2.get(<span class="string">'c'</span>, <span class="string">'xxx'</span>)) <span class="comment"># xxx</span></span><br></pre></td></tr></table></figure><ol start="3"><li><p>key 判断<br>key是否在字典中存在 in，not in</p></li><li><p>获取字典视图</p></li></ol><ul><li>keys 获取所有的key</li><li>values 获取所有的value</li><li>items 获取字典中所有的key,value对<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">map2 = dict(&#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>&#125;)</span><br><span class="line">print(map2.keys(), id(map2))</span><br><span class="line">print(list(map2.keys()), id(map2))</span><br><span class="line">print(map2.values(), id(map2))</span><br><span class="line">print(map2.items(), id(map2))</span><br></pre></td></tr></table></figure></li></ul><ol start="4"><li>字典遍历<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> map2:</span><br><span class="line">    print(item, map2[item])</span><br></pre></td></tr></table></figure></li></ol><h3 id="字典生成式"><a href="#字典生成式" class="headerlink" title="字典生成式"></a>字典生成式</h3><p>拥有keys和values可以通过zip生成一个map<br>{ key: value for key, value in zip(keys, values) }</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">keys = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br><span class="line">values = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">map3 = &#123;key: value <span class="keyword">for</span> key, value <span class="keyword">in</span> zip(keys, values)&#125;</span><br><span class="line">print(map3) <span class="comment"># &#123;'a': 1, 'b': 2, 'c': 3&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;字典的概念&quot;&gt;&lt;a href=&quot;#字典的概念&quot; class=&quot;headerlink&quot; title=&quot;字典的概念&quot;&gt;&lt;/a&gt;字典的概念&lt;/h3&gt;&lt;p&gt;类似于java和js中的map&lt;/p&gt;
&lt;h3 id=&quot;字典操作&quot;&gt;&lt;a href=&quot;#字典操作&quot; class=&quot;h</summary>
      
    
    
    
    <category term="编程" scheme="https://ansike.github.io/blog/categories/programming/"/>
    
    
    <category term="python" scheme="https://ansike.github.io/blog/tags/python/"/>
    
    <category term="language" scheme="https://ansike.github.io/blog/tags/language/"/>
    
  </entry>
  
  <entry>
    <title>循环</title>
    <link href="https://ansike.github.io/blog/programming/%E7%BC%96%E7%A8%8B/python/learn/chapter-5-loop/"/>
    <id>https://ansike.github.io/blog/programming/%E7%BC%96%E7%A8%8B/python/learn/chapter-5-loop/</id>
    <published>2023-07-08T09:42:18.000Z</published>
    <updated>2024-08-08T11:42:01.077Z</updated>
    
    <content type="html"><![CDATA[<h3 id="range-函数"><a href="#range-函数" class="headerlink" title="range() 函数"></a>range() 函数</h3><ul><li>目的：用于生成一个整数序列</li><li>创建方式<ul><li>range(stop) 创建一个[0,stop)的整数序列，步长为1</li><li>range(star,stop) 创建一个[start,stop)的整数序列，步长为1</li><li>range(star,stop,step) 创建一个[start,stop)的整数序列，步长为step</li></ul></li><li>返回值：一个迭代类型对象</li><li>优点：不管range对象的整数序列有多长，所有range对象占用的内存空间都是相同，仅仅需要存储start,stop,和step，只有需要用到range对象时才回去计算序列中的相关元素</li><li>in与 not in判断整数序列中是否存在（不存在）指定的整数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">lst0=range(<span class="number">11</span>)</span><br><span class="line">lst=range(<span class="number">1</span>,<span class="number">11</span>)</span><br><span class="line">lst2=range(<span class="number">1</span>,<span class="number">11</span>,<span class="number">2</span>)</span><br><span class="line">print(list(lst0))</span><br><span class="line">print(list(lst))</span><br><span class="line">print(list(lst2))</span><br><span class="line">print(<span class="number">9</span> <span class="keyword">in</span> lst)</span><br><span class="line">print(<span class="number">9</span> <span class="keyword">not</span> <span class="keyword">in</span> lst)</span><br><span class="line"><span class="comment"># [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></span><br><span class="line"><span class="comment"># [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></span><br><span class="line"><span class="comment"># [1, 3, 5, 7, 9]</span></span><br><span class="line"><span class="comment"># True</span></span><br><span class="line"><span class="comment"># False</span></span><br></pre></td></tr></table></figure><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 循环输出0-10</span></span><br><span class="line">a=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> a &lt; <span class="number">11</span>:</span><br><span class="line">    print(a)</span><br><span class="line">    a+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算0-4之间的累加和</span></span><br><span class="line">a=<span class="number">0</span></span><br><span class="line">sum=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> a&lt;=<span class="number">4</span>:</span><br><span class="line">    sum+=a</span><br><span class="line">    a+=<span class="number">1</span></span><br><span class="line">print(sum) <span class="comment"># 10</span></span><br></pre></td></tr></table></figure><h3 id="for-in循环"><a href="#for-in循环" class="headerlink" title="for-in循环"></a>for-in循环</h3><p>从字符串，序列等中依次取值，遍历的对象必须是可迭代对象<br>循环中不需要使用自定义变量时，可以将自定义变量写为”_”</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从字符串中依次去取字母</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">"hello world"</span>:</span><br><span class="line">    print(i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从数组中依次取出</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    print(i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 計算0-100之間的偶数和</span></span><br><span class="line">sum=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">101</span>):</span><br><span class="line">    <span class="keyword">if</span> i%<span class="number">2</span>==<span class="number">0</span>:</span><br><span class="line">        sum+=i</span><br><span class="line">    i+=<span class="number">1</span></span><br><span class="line">print(sum)</span><br><span class="line"></span><br><span class="line"><span class="string">''' 取出100-999之间的水仙花数</span></span><br><span class="line"><span class="string">    153=1**3+5**3+3**3</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>,<span class="number">1000</span>):</span><br><span class="line">    first=int(i/<span class="number">100</span>);</span><br><span class="line">    second=int(i%<span class="number">100</span>/<span class="number">10</span>)</span><br><span class="line">    third=i%<span class="number">10</span></span><br><span class="line">    <span class="keyword">if</span> first**<span class="number">3</span>+second**<span class="number">3</span>+third**<span class="number">3</span> == i:</span><br><span class="line">        print(i)</span><br><span class="line"><span class="comment"># 153</span></span><br><span class="line"><span class="comment"># 370</span></span><br><span class="line"><span class="comment"># 371</span></span><br><span class="line"><span class="comment"># 407</span></span><br></pre></td></tr></table></figure><h3 id="break-continue-else语句"><a href="#break-continue-else语句" class="headerlink" title="break, continue, else语句"></a>break, continue, else语句</h3><p>break和continue与其他语言一致</p><p>while，for-in循环正常执行完之后就会执行else</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sum=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">101</span>):</span><br><span class="line">    <span class="keyword">if</span> i%<span class="number">2</span>==<span class="number">0</span>:</span><br><span class="line">        sum+=i</span><br><span class="line">    i+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">break</span> <span class="comment"># 如果没有执行break，程序执行完for-in就会走else</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"else"</span>)</span><br><span class="line">print(sum)</span><br></pre></td></tr></table></figure><h3 id="嵌套循环"><a href="#嵌套循环" class="headerlink" title="嵌套循环"></a>嵌套循环</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">打印 99 乘法表</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, i+<span class="number">1</span>):</span><br><span class="line">        print(str(i)+<span class="string">"*"</span>+str(j)+<span class="string">"="</span>+str(i*j), end=<span class="string">'\t'</span>)</span><br><span class="line">    print()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1*1=1</span></span><br><span class="line"><span class="comment"># 2*1=22*2=4</span></span><br><span class="line"><span class="comment"># 3*1=33*2=63*3=9</span></span><br><span class="line"><span class="comment"># 4*1=44*2=84*3=124*4=16</span></span><br><span class="line"><span class="comment"># 5*1=55*2=105*3=155*4=205*5=25</span></span><br><span class="line"><span class="comment"># 6*1=66*2=126*3=186*4=246*5=306*6=36</span></span><br><span class="line"><span class="comment"># 7*1=77*2=147*3=217*4=287*5=357*6=427*7=49</span></span><br><span class="line"><span class="comment"># 8*1=88*2=168*3=248*4=328*5=408*6=488*7=568*8=64</span></span><br><span class="line"><span class="comment"># 9*1=99*2=189*3=279*4=369*5=459*6=549*7=639*8=729*9=81</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;range-函数&quot;&gt;&lt;a href=&quot;#range-函数&quot; class=&quot;headerlink&quot; title=&quot;range() 函数&quot;&gt;&lt;/a&gt;range() 函数&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;目的：用于生成一个整数序列&lt;/li&gt;
&lt;li&gt;创建方式&lt;ul&gt;
&lt;li&gt;</summary>
      
    
    
    
    <category term="编程" scheme="https://ansike.github.io/blog/categories/programming/"/>
    
    
    <category term="python" scheme="https://ansike.github.io/blog/tags/python/"/>
    
    <category term="language" scheme="https://ansike.github.io/blog/tags/language/"/>
    
  </entry>
  
  <entry>
    <title>列表</title>
    <link href="https://ansike.github.io/blog/programming/%E7%BC%96%E7%A8%8B/python/learn/chapter-6-list/"/>
    <id>https://ansike.github.io/blog/programming/%E7%BC%96%E7%A8%8B/python/learn/chapter-6-list/</id>
    <published>2023-07-08T09:42:18.000Z</published>
    <updated>2024-08-08T11:42:01.077Z</updated>
    
    <content type="html"><![CDATA[<h3 id="列表的创建与删除"><a href="#列表的创建与删除" class="headerlink" title="列表的创建与删除"></a>列表的创建与删除</h3><ul><li>中括号</li><li>内置函数list()</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">lst=[<span class="number">1</span>,<span class="number">2</span>,<span class="string">'szxc'</span>]</span><br><span class="line">print(lst)</span><br><span class="line"></span><br><span class="line">lst2=list([<span class="number">1</span>,<span class="number">2</span>,<span class="string">'xzc'</span>])</span><br><span class="line">print(lst2)</span><br><span class="line">```  </span><br><span class="line"><span class="comment">### 查询</span></span><br><span class="line">- 获取列表元素的索引 index()</span><br><span class="line">- 获取单个元素lst[<span class="number">0</span>]</span><br><span class="line">- 获取列表中的多个元素：切片 lst[start: stop: step]</span><br><span class="line">  - 结果是一个片段的拷贝</span><br><span class="line">  - 数据范围[start, stop)</span><br><span class="line">  - step 默认为<span class="number">1</span></span><br><span class="line">    - step为正数 start默认列表第一个元素，stop默认列表最后一个元素</span><br><span class="line">    - step为负数 start默认列表最后一个元素，stop默认列表第一个元素</span><br><span class="line"></span><br><span class="line">- 判断元素是否在列表中 <span class="keyword">in</span>, <span class="keyword">not</span> <span class="keyword">in</span></span><br><span class="line">- 遍历列表 <span class="keyword">for</span>-<span class="keyword">in</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### 增删改查</span></span><br><span class="line">- 增</span><br><span class="line">  - append 列表末尾添加一个元素</span><br><span class="line">  - extend 在列表末尾至少添加一个元素</span><br><span class="line">  - insert 在列表任意位置添加一个元素</span><br><span class="line">  - 切片 在列表任意位置添加至少一个元素</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">lst = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">lst.append(<span class="number">100</span>)</span><br><span class="line">print(lst, id(lst))  <span class="comment"># [1, 2, 3, 4, 5, 100] 1568407185152</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 追加值</span></span><br><span class="line">lst2 = [<span class="string">'1'</span>, <span class="literal">True</span>]</span><br><span class="line">lst.append(lst2)</span><br><span class="line">print(lst, id(lst))  <span class="comment"># [1, 2, 3, 4, 5, 100, ['1', True]] 1568407185152</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 最后位置增加多个值</span></span><br><span class="line">lst.extend(lst2)</span><br><span class="line">print(lst, id(lst))  <span class="comment"># [1, 2, 3, 4, 5, 100, ['1', True], '1', True] 1568407185152</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 任意的位置插入</span></span><br><span class="line">lst.insert(<span class="number">1</span>, <span class="number">20</span>)</span><br><span class="line">print(lst, id(lst))  <span class="comment"># [1, 20, 2, 3, 4, 5, 100, ['1', True], '1', True] 1568407185152</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 任意位置增加多个元素</span></span><br><span class="line">lst[<span class="number">5</span>:] = [<span class="string">'new'</span>, <span class="string">'item'</span>]</span><br><span class="line">print(lst, id(lst))  <span class="comment"># [1, 20, 2, 3, 4, 'new', 'item'] 1568407185152</span></span><br></pre></td></tr></table></figure><ul><li>删<ul><li>remove <ul><li>一次移除一个元素</li><li>重复元素只删除第一个</li><li>元素不存在会报错 ValueError</li></ul></li><li>pop<ul><li>删除一个指定索引位置上的元素</li><li>指定索引不存在抛出IndexError</li><li>不指定索引，删除列表中最后一个元素</li></ul></li><li>切片 一次至少删除一个元素</li><li>clear 清空列表</li><li>del 删除列表</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">lst = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>]</span><br><span class="line">print(lst, id(lst))  <span class="comment"># [1, 2, 3, 4, 5, 1] 2151079831296</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 移除1</span></span><br><span class="line">lst.remove(<span class="number">1</span>)</span><br><span class="line">print(lst, id(lst))  <span class="comment"># [2, 3, 4, 5, 1] 2151079831296</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># pop</span></span><br><span class="line">lst.pop(<span class="number">1</span>)</span><br><span class="line">print(lst, id(lst))  <span class="comment"># [2, 4, 5, 1] 2151079831296</span></span><br><span class="line">lst.pop()</span><br><span class="line">print(lst, id(lst))  <span class="comment"># [2, 4, 5] 2151079831296</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 切片</span></span><br><span class="line">nlst=lst[<span class="number">1</span>:<span class="number">2</span>]</span><br><span class="line">print(nlst, id(nlst))  <span class="comment"># [4] 2259247206592</span></span><br><span class="line"></span><br><span class="line">lst.clear()</span><br><span class="line">print(lst, id(lst))  <span class="comment"># [] 2536412899072</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> lst</span><br><span class="line"><span class="comment"># print(lst, id(lst))  # NameError: name 'lst' is not defined. Did you mean: 'nlst'?</span></span><br></pre></td></tr></table></figure><ul><li>改<ul><li>指定索引赋一个新zhi</li><li>为指定切片赋一个新值<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">lst = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>]</span><br><span class="line">print(lst, id(lst))  <span class="comment"># [1, 2, 3, 4, 5, 1] 2151079831296</span></span><br><span class="line"></span><br><span class="line">lst[<span class="number">0</span>] = <span class="number">100</span></span><br><span class="line">print(lst, id(lst))  <span class="comment"># [100, 2, 3, 4, 5, 1] 2819189270272</span></span><br><span class="line"></span><br><span class="line">lst[<span class="number">1</span>:<span class="number">1</span>] = [<span class="number">21</span>,<span class="number">22</span>,<span class="number">23</span>]</span><br><span class="line">print(lst, id(lst))  <span class="comment"># [100, 21, 22, 23, 2, 3, 4, 5, 1] 2819189270272</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><ol><li>sort()方法 默认从小到大，可以指定reverse=True 进行降序排序</li><li>内置函数sorted() 可以指定reverse=True 进行降序排序<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">lst = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>]</span><br><span class="line">print(lst, id(lst))  <span class="comment"># [1, 2, 3, 4, 5, 1] 1835533231872</span></span><br><span class="line">nlst = sorted(lst)</span><br><span class="line">print(nlst, id(nlst))  <span class="comment"># [1, 1, 2, 3, 4, 5] 1835534291136</span></span><br><span class="line"></span><br><span class="line">lst.sort()</span><br><span class="line">print(lst, id(lst))  <span class="comment"># [1, 1, 2, 3, 4, 5] 1835533231872</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="列表生成式"><a href="#列表生成式" class="headerlink" title="列表生成式"></a>列表生成式</h3><p>[ i for i in range(1,10)]</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lst2=[ i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">10</span>)]</span><br><span class="line"><span class="comment"># [1, 2, 3, 4, 5, 6, 7, 8, 9] 2119767246080</span></span><br><span class="line">print(lst2, id(lst2))</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;列表的创建与删除&quot;&gt;&lt;a href=&quot;#列表的创建与删除&quot; class=&quot;headerlink&quot; title=&quot;列表的创建与删除&quot;&gt;&lt;/a&gt;列表的创建与删除&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;中括号&lt;/li&gt;
&lt;li&gt;内置函数list()&lt;/li&gt;
&lt;/ul&gt;
&lt;figu</summary>
      
    
    
    
    <category term="编程" scheme="https://ansike.github.io/blog/categories/programming/"/>
    
    
    <category term="python" scheme="https://ansike.github.io/blog/tags/python/"/>
    
    <category term="language" scheme="https://ansike.github.io/blog/tags/language/"/>
    
  </entry>
  
  <entry>
    <title>分支结构</title>
    <link href="https://ansike.github.io/blog/programming/%E7%BC%96%E7%A8%8B/python/learn/chapter-4/"/>
    <id>https://ansike.github.io/blog/programming/%E7%BC%96%E7%A8%8B/python/learn/chapter-4/</id>
    <published>2023-07-03T16:58:02.000Z</published>
    <updated>2024-08-08T11:42:01.077Z</updated>
    
    <content type="html"><![CDATA[<h3 id="对象的bool值"><a href="#对象的bool值" class="headerlink" title="对象的bool值"></a>对象的bool值</h3><p>python一切皆对象，所有的对象都有一个bool<br>获取对象的bool值，使用内置函数 bool()</p><p>以下对象的bool值为False</p><ul><li>Flase</li><li>数值0</li><li>None</li><li>空字符串</li><li>空列表</li><li>空字典</li><li>空集合<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">print(bool(<span class="literal">False</span>))</span><br><span class="line">print(bool(<span class="number">0</span>))</span><br><span class="line">print(bool(<span class="number">0.0</span>))</span><br><span class="line">print(bool(<span class="literal">None</span>))</span><br><span class="line">print(bool(<span class="string">''</span>))</span><br><span class="line">print(bool(<span class="string">""</span>))</span><br><span class="line">print(bool([]))</span><br><span class="line">print(bool(list()))</span><br><span class="line">print(bool(()))</span><br><span class="line">print(bool(tuple()))</span><br><span class="line">print(bool(&#123;&#125;))</span><br><span class="line">print(bool(dict()))</span><br><span class="line">print(bool(set()))</span><br></pre></td></tr></table></figure></li></ul><h3 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h3><ul><li>单分支结构 if</li><li>双分支结构 if else</li><li>多分支结构 if elif else</li><li>if语句嵌套</li><li>条件表达式</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">money=<span class="number">1000</span></span><br><span class="line">s=int(input(<span class="string">"请输入数值\n12"</span>))</span><br><span class="line"><span class="keyword">if</span> money&gt;=s:</span><br><span class="line">    money-=s</span><br><span class="line">    print(<span class="string">"取款成功，余额为"</span>+str(money))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">num=int(input(<span class="string">"请输入一个整数"</span>))</span><br><span class="line"><span class="keyword">if</span> num%<span class="number">2</span>==<span class="number">0</span>:</span><br><span class="line">    print(num, <span class="string">"是偶数"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(num, <span class="string">"是奇数"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> num&gt;=<span class="number">90</span> <span class="keyword">and</span> num &lt;= <span class="number">100</span>:</span><br><span class="line">    print(<span class="string">"A级"</span>)</span><br><span class="line"><span class="keyword">elif</span> num&gt;=<span class="number">80</span> <span class="keyword">and</span> num&lt;=<span class="number">89</span>:</span><br><span class="line">    print(<span class="string">"B级"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"C级"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 类似三元</span></span><br><span class="line">b = <span class="number">10</span> <span class="keyword">if</span> <span class="number">30</span> &gt; <span class="number">20</span> <span class="keyword">else</span> <span class="number">20</span></span><br><span class="line">print(b) <span class="comment"># 10</span></span><br></pre></td></tr></table></figure><h3 id="pass空语句"><a href="#pass空语句" class="headerlink" title="pass空语句"></a>pass空语句</h3><p>python不像其他的语言可以写空的代码块，必须要有pass占位</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">num=int(input(<span class="string">"请输入一个整数"</span>))</span><br><span class="line"><span class="keyword">if</span> num%<span class="number">2</span>==<span class="number">0</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;对象的bool值&quot;&gt;&lt;a href=&quot;#对象的bool值&quot; class=&quot;headerlink&quot; title=&quot;对象的bool值&quot;&gt;&lt;/a&gt;对象的bool值&lt;/h3&gt;&lt;p&gt;python一切皆对象，所有的对象都有一个bool&lt;br&gt;获取对象的bool值，使用内置函数</summary>
      
    
    
    
    <category term="编程" scheme="https://ansike.github.io/blog/categories/programming/"/>
    
    
    <category term="python" scheme="https://ansike.github.io/blog/tags/python/"/>
    
    <category term="language" scheme="https://ansike.github.io/blog/tags/language/"/>
    
  </entry>
  
  <entry>
    <title>input，运算符及优先级</title>
    <link href="https://ansike.github.io/blog/programming/%E7%BC%96%E7%A8%8B/python/learn/chapter-3/"/>
    <id>https://ansike.github.io/blog/programming/%E7%BC%96%E7%A8%8B/python/learn/chapter-3/</id>
    <published>2023-07-03T15:38:39.000Z</published>
    <updated>2024-08-08T11:42:01.077Z</updated>
    
    <content type="html"><![CDATA[<h1 id="input-函数"><a href="#input-函数" class="headerlink" title="input 函数"></a>input 函数</h1><p>接受用户的输入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iptStr=input(<span class="string">'你是谁？'</span>)</span><br><span class="line">print(<span class="string">'你是：'</span>+iptStr)</span><br></pre></td></tr></table></figure><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><ul><li>算数运算符<ul><li>加减乘除 +, -, *, /</li><li>特殊的整除 //<ul><li>注意 9//4 =&gt; 2， -9//4 =&gt; -3 向下取整</li></ul></li><li>此外还有取余<code>%</code>和幂运算<code>**</code><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="number">9</span>/<span class="number">4</span>) <span class="comment"># 2.25</span></span><br><span class="line">print(<span class="number">9</span>//<span class="number">4</span>) <span class="comment"># 2</span></span><br><span class="line">print(<span class="number">9</span>//<span class="number">-4</span>) <span class="comment"># -3</span></span><br><span class="line">print(<span class="number">9</span>%<span class="number">-4</span>) <span class="comment"># 被除数-除数*商 =&gt; 9-(-4)*(-3) -3</span></span><br><span class="line">print(<span class="number">-9</span>%<span class="number">4</span>) <span class="comment"># 被除数-除数*商 =&gt; -9-(4)*(-3) 3</span></span><br></pre></td></tr></table></figure></li></ul></li><li>赋值运算符<ul><li>和常规的语言类似</li><li>注意的点有一个解包赋值的概念与js中的解构赋值类似 <ul><li>a,b,c=10,20,30。最后a，b，c分别赋值10，20，30</li><li>变量交换 a,b=b,a</li></ul></li></ul></li><li>bool运算符<ul><li>and, or, not, in, not in</li></ul></li><li>比较运算符<ul><li><blockquote><p>,&lt;,&gt;=,&lt;=</p></blockquote></li><li>== 对象value的比较</li><li>is, is not 对象id的比较<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">l1=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">l2=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">print(l1==l2) <span class="comment"># True</span></span><br><span class="line">print(id(l1),id(l2)) <span class="comment"># 2489543058880 2489543921216</span></span><br><span class="line"></span><br><span class="line">a,b=<span class="number">1</span>,<span class="number">1</span></span><br><span class="line">print(a==b) <span class="comment"># True</span></span><br><span class="line">print(a <span class="keyword">is</span> b) <span class="comment"># True 注意python中对于同一个int值的id值是一样的</span></span><br></pre></td></tr></table></figure></li></ul></li><li>位运算符<ul><li>&amp;,|,&lt;&lt;,&gt;&gt;</li></ul></li></ul><h1 id="运算符的优先级"><a href="#运算符的优先级" class="headerlink" title="运算符的优先级"></a>运算符的优先级</h1><p>算术运算符 &gt; 位运算符 &gt; 比较运算符 &gt; bool运算符 &gt; 赋值运算符</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;input-函数&quot;&gt;&lt;a href=&quot;#input-函数&quot; class=&quot;headerlink&quot; title=&quot;input 函数&quot;&gt;&lt;/a&gt;input 函数&lt;/h1&gt;&lt;p&gt;接受用户的输入&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="编程" scheme="https://ansike.github.io/blog/categories/programming/"/>
    
    
    <category term="python" scheme="https://ansike.github.io/blog/tags/python/"/>
    
    <category term="language" scheme="https://ansike.github.io/blog/tags/language/"/>
    
  </entry>
  
  <entry>
    <title>print和转义字符</title>
    <link href="https://ansike.github.io/blog/programming/%E7%BC%96%E7%A8%8B/python/learn/chapter-1/"/>
    <id>https://ansike.github.io/blog/programming/%E7%BC%96%E7%A8%8B/python/learn/chapter-1/</id>
    <published>2023-07-02T07:41:11.000Z</published>
    <updated>2024-08-08T11:42:01.075Z</updated>
    
    <content type="html"><![CDATA[<h1 id="print-函数使用"><a href="#print-函数使用" class="headerlink" title="print 函数使用"></a>print 函数使用</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 输出数字</span></span><br><span class="line">print(<span class="number">520</span>)</span><br><span class="line">print(<span class="number">52.1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出字符串</span></span><br><span class="line">print(<span class="string">'hello world'</span>)</span><br><span class="line">print(<span class="string">"hello world"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 含有运算符的表达式</span></span><br><span class="line">print(<span class="number">2</span>+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将数据写入文件</span></span><br><span class="line">fp = open(<span class="string">'print.txt'</span>, <span class="string">'a+'</span>)</span><br><span class="line">print(<span class="string">'hello world'</span>, file=fp)</span><br><span class="line">fp.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不换行</span></span><br><span class="line">print(<span class="string">'hello'</span>, <span class="string">'world'</span>, <span class="string">'python'</span>)</span><br></pre></td></tr></table></figure><h1 id="python中的转义字符"><a href="#python中的转义字符" class="headerlink" title="python中的转义字符"></a>python中的转义字符</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一次输出中间加换行</span></span><br><span class="line">print(<span class="string">'hello\nworld'</span>)</span><br><span class="line">print(<span class="string">'hello\tworld'</span>)</span><br><span class="line">print(<span class="string">'helloooo\tworld'</span>)</span><br><span class="line"><span class="comment"># 观察两个制表位的空间大小不一致，是因为一个\t是4个字符。第一个'hello\tworld'中第一个o占据了一个空间，\t只能是占三个字符的空间。</span></span><br><span class="line"><span class="comment"># 第二个'helloooo\tworld'字符长度对4取余是0，没有占据制表位的字符，所以第二个实际撑开的空间就是默认的4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 回车 后边的内容会覆盖之前的内容</span></span><br><span class="line">print(<span class="string">'hello\rworld'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 退格 会删掉之前的一个字符</span></span><br><span class="line">print(<span class="string">'hello\bworld'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 转移引号</span></span><br><span class="line">print(<span class="string">'he say \'hello world\''</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 原字符 不希望print对字符串中的转义字符解析</span></span><br><span class="line">print(<span class="string">r'he say \'hello world\''</span>)</span><br><span class="line"><span class="comment"># 最后一个字符不能是反斜杠</span></span><br><span class="line"><span class="comment"># print(r'he say \'hello world\')</span></span><br><span class="line">print(<span class="string">r'he say \'hello world\\'</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;print-函数使用&quot;&gt;&lt;a href=&quot;#print-函数使用&quot; class=&quot;headerlink&quot; title=&quot;print 函数使用&quot;&gt;&lt;/a&gt;print 函数使用&lt;/h1&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;</summary>
      
    
    
    
    <category term="编程" scheme="https://ansike.github.io/blog/categories/programming/"/>
    
    
    <category term="python" scheme="https://ansike.github.io/blog/tags/python/"/>
    
    <category term="language" scheme="https://ansike.github.io/blog/tags/language/"/>
    
  </entry>
  
  <entry>
    <title>变量和常见数据类型</title>
    <link href="https://ansike.github.io/blog/programming/%E7%BC%96%E7%A8%8B/python/learn/chapter-2/"/>
    <id>https://ansike.github.io/blog/programming/%E7%BC%96%E7%A8%8B/python/learn/chapter-2/</id>
    <published>2023-07-02T07:41:11.000Z</published>
    <updated>2024-08-08T11:42:01.077Z</updated>
    
    <content type="html"><![CDATA[<h1 id="二进制与字符编码"><a href="#二进制与字符编码" class="headerlink" title="二进制与字符编码"></a>二进制与字符编码</h1><p>计算机中存储和使用的内容是字符，但是在运行过程中只能是以二进制的形式进行运算。</p><h1 id="标识符与保留字"><a href="#标识符与保留字" class="headerlink" title="标识符与保留字"></a>标识符与保留字</h1><p>保留字：和其他语言类似指已被python使用的特定的符号</p><p>以下就是3.11.4版本的所有保留字</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> keyword</span><br><span class="line">print(keyword.kwlist)</span><br><span class="line"><span class="comment"># ['False', 'None', 'True', 'and', 'as', 'assert', 'async', 'await', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield']</span></span><br></pre></td></tr></table></figure><p>标识符：说白了就是一个python定义变量，函数，模块等使用的符号<br>规则：</p><ul><li>字母，数字，下划线</li><li>不能以数字开头</li><li>不能是保留字</li><li>严格区分大小写</li></ul><h1 id="变量与数据类型"><a href="#变量与数据类型" class="headerlink" title="变量与数据类型"></a>变量与数据类型</h1><p><strong>变量有三部分组成</strong></p><ul><li>标识：对象存储的内存地址，使用内置韩式id(obj)来获取</li><li>类型：对象的数据类型，使用内置函数type(obj)来获取</li><li>值：对象存储的具体数据，使用print(obj)来打印<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 标识为name，类型为str，值为xxx</span></span><br><span class="line">name=<span class="string">"xxx"</span></span><br><span class="line">print(id(name))</span><br><span class="line">print(type(name))</span><br><span class="line">print(name)</span><br><span class="line"><span class="comment"># 2291035693488</span></span><br><span class="line"><span class="comment"># &lt;class 'str'&gt;</span></span><br><span class="line"><span class="comment"># xxx</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>常用的数据类型：</strong></p><ul><li>整数 int 213<ul><li>可以表示正数，负数和0</li><li>不同的进制表示默认十进制，0b 二进制，0o 八进制，0x 十六进制</li></ul></li><li>浮点数 float 3.14<ul><li>由正数和小数组成</li><li>浮点数计算不精确  使用decimal模块解决<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="number">1.1</span>+<span class="number">2.2</span>) <span class="comment"># 3.3000000000000003</span></span><br><span class="line">print(<span class="number">1.1</span>+<span class="number">2.1</span>) <span class="comment"># 3.2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> Decimal</span><br><span class="line">print(Decimal(<span class="string">'1.1'</span>)+Decimal(<span class="string">'2.2'</span>)) <span class="comment">#3.3</span></span><br></pre></td></tr></table></figure></li></ul></li><li>布尔 bool true|false<ul><li>表示真或者假</li><li>bool值可以转换为整数<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="literal">True</span>+<span class="number">1</span>) <span class="comment"># 2</span></span><br><span class="line">print(<span class="literal">False</span>+<span class="number">1</span>) <span class="comment"># 1</span></span><br></pre></td></tr></table></figure></li></ul></li><li>字符串 str “xxx”<ul><li>字符串又被称为不可变的字符序列</li><li>可以使用单引号，双引号或者三引号（’’’,”””）来定义</li><li>单引号和双引号定义的字符串必须在一行</li><li>三引号定义的字符串可以分布连续的多行，中间的换行符会直接输出</li></ul></li></ul><p><strong>数据类型转换</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 三个函数 int(), float(), str()</span></span><br><span class="line">a=<span class="number">100</span></span><br><span class="line">b=<span class="number">10.1</span></span><br><span class="line">c=<span class="literal">True</span></span><br><span class="line">d=<span class="string">'hello'</span></span><br><span class="line">e=<span class="string">'10'</span></span><br><span class="line">f=<span class="string">'10.2'</span></span><br><span class="line">print(type(a),type(b),type(c),type(d),type(e),type(f))</span><br><span class="line"></span><br><span class="line"><span class="comment"># int 转换</span></span><br><span class="line">print(type(int(a)),type(int(b)),type(int(c)),type(int(e)))</span><br><span class="line"><span class="comment"># 可以看到字符串和浮点数的字符串都无法直接使用int转换</span></span><br><span class="line"><span class="comment"># print(type(int(d))) # 报错 ValueError: invalid literal for int() with base 10: 'hello'</span></span><br><span class="line"><span class="comment"># print(type(int(f))) # 报错 ValueError: invalid literal for int() with base 10: '10.2'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># float 转换</span></span><br><span class="line">print(type(float(a)),type(float(b)),type(float(c)),type(float(e)))</span><br><span class="line"><span class="comment"># print(type(float(d))) # ValueError: could not convert string to float: 'hello'</span></span><br><span class="line">print(type(float(f)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># str 转换</span></span><br><span class="line">print(type(str(a)),type(str(b)),type(str(c)),type(str(e)))</span><br><span class="line">print(type(str(d)))</span><br><span class="line">print(type(str(f)))</span><br></pre></td></tr></table></figure><h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><ul><li>单行注释 单个#</li><li>多行注释 没有单独的多行注释标记 一对三引号之间的代码称为多行注释</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;二进制与字符编码&quot;&gt;&lt;a href=&quot;#二进制与字符编码&quot; class=&quot;headerlink&quot; title=&quot;二进制与字符编码&quot;&gt;&lt;/a&gt;二进制与字符编码&lt;/h1&gt;&lt;p&gt;计算机中存储和使用的内容是字符，但是在运行过程中只能是以二进制的形式进行运算。&lt;/p&gt;
&lt;h</summary>
      
    
    
    
    <category term="编程" scheme="https://ansike.github.io/blog/categories/programming/"/>
    
    
    <category term="python" scheme="https://ansike.github.io/blog/tags/python/"/>
    
    <category term="language" scheme="https://ansike.github.io/blog/tags/language/"/>
    
  </entry>
  
  <entry>
    <title>加解密</title>
    <link href="https://ansike.github.io/blog/programming/%E7%BC%96%E7%A8%8B/js/node/%E5%8A%A0%E8%A7%A3%E5%AF%86/"/>
    <id>https://ansike.github.io/blog/programming/%E7%BC%96%E7%A8%8B/js/node/%E5%8A%A0%E8%A7%A3%E5%AF%86/</id>
    <published>2023-05-25T16:38:55.000Z</published>
    <updated>2024-08-08T11:42:01.066Z</updated>
    
    <content type="html"><![CDATA[<p>常见的加解密方式有AES（对称加密）和RSA（非对称加密）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;常见的加解密方式有AES（对称加密）和RSA（非对称加密）&lt;/p&gt;
</summary>
      
    
    
    
    <category term="编程" scheme="https://ansike.github.io/blog/categories/programming/"/>
    
    
    <category term="js" scheme="https://ansike.github.io/blog/tags/js/"/>
    
  </entry>
  
</feed>
